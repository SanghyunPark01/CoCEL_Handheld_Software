
cocel_handheld_trigger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000325c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003368  08003368  00004368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003424  08003424  00005064  2**0
                  CONTENTS
  4 .ARM          00000000  08003424  08003424  00005064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003424  08003424  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003424  08003424  00004424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003428  08003428  00004428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800342c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000064  08003490  00005064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08003490  000053d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b748  00000000  00000000  0000508d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a48  00000000  00000000  000107d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00012220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091e  00000000  00000000  00012db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176c0  00000000  00000000  000136d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cce7  00000000  00000000  0002ad96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d09  00000000  00000000  00037a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1786  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035dc  00000000  00000000  000c17cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c4da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08003350 	.word	0x08003350

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08003350 	.word	0x08003350

0800014c <checkNum>:
char tx_buffer2[] = "Message Receive\n";

unsigned char result;
int i;
int checkNum(const char *gprmcContext)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    if (gprmcContext == NULL)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d102      	bne.n	8000160 <checkNum+0x14>
    {
        return -1;
 800015a:	f04f 33ff 	mov.w	r3, #4294967295
 800015e:	e036      	b.n	80001ce <checkNum+0x82>
	}

    result = gprmcContext[1];
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	3301      	adds	r3, #1
 8000164:	781a      	ldrb	r2, [r3, #0]
 8000166:	4b1c      	ldr	r3, [pc, #112]	@ (80001d8 <checkNum+0x8c>)
 8000168:	701a      	strb	r2, [r3, #0]

    for (i = 2; gprmcContext[i] != '*' && gprmcContext[i] != '\0'; i++)
 800016a:	4b1c      	ldr	r3, [pc, #112]	@ (80001dc <checkNum+0x90>)
 800016c:	2202      	movs	r2, #2
 800016e:	601a      	str	r2, [r3, #0]
 8000170:	e010      	b.n	8000194 <checkNum+0x48>
    {
        result ^= gprmcContext[i];
 8000172:	4b1a      	ldr	r3, [pc, #104]	@ (80001dc <checkNum+0x90>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	461a      	mov	r2, r3
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	4413      	add	r3, r2
 800017c:	781a      	ldrb	r2, [r3, #0]
 800017e:	4b16      	ldr	r3, [pc, #88]	@ (80001d8 <checkNum+0x8c>)
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	4053      	eors	r3, r2
 8000184:	b2da      	uxtb	r2, r3
 8000186:	4b14      	ldr	r3, [pc, #80]	@ (80001d8 <checkNum+0x8c>)
 8000188:	701a      	strb	r2, [r3, #0]
    for (i = 2; gprmcContext[i] != '*' && gprmcContext[i] != '\0'; i++)
 800018a:	4b14      	ldr	r3, [pc, #80]	@ (80001dc <checkNum+0x90>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	3301      	adds	r3, #1
 8000190:	4a12      	ldr	r2, [pc, #72]	@ (80001dc <checkNum+0x90>)
 8000192:	6013      	str	r3, [r2, #0]
 8000194:	4b11      	ldr	r3, [pc, #68]	@ (80001dc <checkNum+0x90>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	461a      	mov	r2, r3
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4413      	add	r3, r2
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80001a2:	d007      	beq.n	80001b4 <checkNum+0x68>
 80001a4:	4b0d      	ldr	r3, [pc, #52]	@ (80001dc <checkNum+0x90>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	461a      	mov	r2, r3
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	4413      	add	r3, r2
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d1de      	bne.n	8000172 <checkNum+0x26>
    }

    if (gprmcContext[i] != '*')
 80001b4:	4b09      	ldr	r3, [pc, #36]	@ (80001dc <checkNum+0x90>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	461a      	mov	r2, r3
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	4413      	add	r3, r2
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80001c2:	d002      	beq.n	80001ca <checkNum+0x7e>
    {
        return -1;
 80001c4:	f04f 33ff 	mov.w	r3, #4294967295
 80001c8:	e001      	b.n	80001ce <checkNum+0x82>
    }

    return result;
 80001ca:	4b03      	ldr	r3, [pc, #12]	@ (80001d8 <checkNum+0x8c>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
}
 80001ce:	4618      	mov	r0, r3
 80001d0:	370c      	adds	r7, #12
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	200001a0 	.word	0x200001a0
 80001dc:	200001a4 	.word	0x200001a4

080001e0 <HAL_TIM_PeriodElapsedCallback>:
char gprmcStr[7]="$GPRMC,";
char data[100]="";
int check_num=0;
char checkNumChar[2] = "";
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Timer Interrupt
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b086      	sub	sp, #24
 80001e4:	af04      	add	r7, sp, #16
 80001e6:	6078      	str	r0, [r7, #4]
	if(ss<59)
 80001e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000298 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	2b3a      	cmp	r3, #58	@ 0x3a
 80001ee:	dc05      	bgt.n	80001fc <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ss++;
 80001f0:	4b29      	ldr	r3, [pc, #164]	@ (8000298 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	3301      	adds	r3, #1
 80001f6:	4a28      	ldr	r2, [pc, #160]	@ (8000298 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80001f8:	6013      	str	r3, [r2, #0]
 80001fa:	e01c      	b.n	8000236 <HAL_TIM_PeriodElapsedCallback+0x56>
	}
	else
	{
		ss=0;
 80001fc:	4b26      	ldr	r3, [pc, #152]	@ (8000298 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
		if(mm<59)
 8000202:	4b26      	ldr	r3, [pc, #152]	@ (800029c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	2b3a      	cmp	r3, #58	@ 0x3a
 8000208:	dc05      	bgt.n	8000216 <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			mm++;
 800020a:	4b24      	ldr	r3, [pc, #144]	@ (800029c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	3301      	adds	r3, #1
 8000210:	4a22      	ldr	r2, [pc, #136]	@ (800029c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000212:	6013      	str	r3, [r2, #0]
 8000214:	e00f      	b.n	8000236 <HAL_TIM_PeriodElapsedCallback+0x56>
		}
		else
		{
			mm=0;
 8000216:	4b21      	ldr	r3, [pc, #132]	@ (800029c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
			if(hh<23)
 800021c:	4b20      	ldr	r3, [pc, #128]	@ (80002a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	2b16      	cmp	r3, #22
 8000222:	dc05      	bgt.n	8000230 <HAL_TIM_PeriodElapsedCallback+0x50>
			{
				hh++;
 8000224:	4b1e      	ldr	r3, [pc, #120]	@ (80002a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	3301      	adds	r3, #1
 800022a:	4a1d      	ldr	r2, [pc, #116]	@ (80002a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800022c:	6013      	str	r3, [r2, #0]
 800022e:	e002      	b.n	8000236 <HAL_TIM_PeriodElapsedCallback+0x56>
			}
			else
			{
				hh=0;
 8000230:	4b1b      	ldr	r3, [pc, #108]	@ (80002a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
			}
		}
	}
	sprintf(data, "%s%02d%02d%02d%s", gprmcStr, hh, mm, ss, ".00,A,2237.496474,N,11356.089515,E,0.0,225.5,230520,2.3,W,A*");
 8000236:	4b1a      	ldr	r3, [pc, #104]	@ (80002a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000238:	6819      	ldr	r1, [r3, #0]
 800023a:	4b18      	ldr	r3, [pc, #96]	@ (800029c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a16      	ldr	r2, [pc, #88]	@ (8000298 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000240:	6812      	ldr	r2, [r2, #0]
 8000242:	4818      	ldr	r0, [pc, #96]	@ (80002a4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000244:	9002      	str	r0, [sp, #8]
 8000246:	9201      	str	r2, [sp, #4]
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	460b      	mov	r3, r1
 800024c:	4a16      	ldr	r2, [pc, #88]	@ (80002a8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800024e:	4917      	ldr	r1, [pc, #92]	@ (80002ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000250:	4817      	ldr	r0, [pc, #92]	@ (80002b0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000252:	f002 fbc5 	bl	80029e0 <siprintf>
	strcpy(tmp,data);
 8000256:	4916      	ldr	r1, [pc, #88]	@ (80002b0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000258:	4816      	ldr	r0, [pc, #88]	@ (80002b4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800025a:	f002 fc15 	bl	8002a88 <strcpy>

	check_num = checkNum(tmp);
 800025e:	4815      	ldr	r0, [pc, #84]	@ (80002b4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000260:	f7ff ff74 	bl	800014c <checkNum>
 8000264:	4603      	mov	r3, r0
 8000266:	4a14      	ldr	r2, [pc, #80]	@ (80002b8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000268:	6013      	str	r3, [r2, #0]
	sprintf(checkNumChar, "%02X", check_num);
 800026a:	4b13      	ldr	r3, [pc, #76]	@ (80002b8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	461a      	mov	r2, r3
 8000270:	4912      	ldr	r1, [pc, #72]	@ (80002bc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000272:	4813      	ldr	r0, [pc, #76]	@ (80002c0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000274:	f002 fbb4 	bl	80029e0 <siprintf>

	HAL_UART_Transmit(&huart2, data, sizeof(data)-1, 10);
 8000278:	230a      	movs	r3, #10
 800027a:	2263      	movs	r2, #99	@ 0x63
 800027c:	490c      	ldr	r1, [pc, #48]	@ (80002b0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800027e:	4811      	ldr	r0, [pc, #68]	@ (80002c4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000280:	f002 fa2e 	bl	80026e0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, checkNumChar, sizeof(checkNumChar)-1, 10);
 8000284:	230a      	movs	r3, #10
 8000286:	2201      	movs	r2, #1
 8000288:	490d      	ldr	r1, [pc, #52]	@ (80002c0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800028a:	480e      	ldr	r0, [pc, #56]	@ (80002c4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800028c:	f002 fa28 	bl	80026e0 <HAL_UART_Transmit>


}
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	2000020c 	.word	0x2000020c
 800029c:	20000210 	.word	0x20000210
 80002a0:	20000214 	.word	0x20000214
 80002a4:	0800337c 	.word	0x0800337c
 80002a8:	20000000 	.word	0x20000000
 80002ac:	08003368 	.word	0x08003368
 80002b0:	20000218 	.word	0x20000218
 80002b4:	200001a8 	.word	0x200001a8
 80002b8:	2000027c 	.word	0x2000027c
 80002bc:	080033bc 	.word	0x080033bc
 80002c0:	20000280 	.word	0x20000280
 80002c4:	20000158 	.word	0x20000158

080002c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002cc:	f000 fc08 	bl	8000ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d0:	f000 f83e 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d4:	f000 f9b6 	bl	8000644 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002d8:	f000 f87c 	bl	80003d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80002dc:	f000 f8d4 	bl	8000488 <MX_TIM3_Init>
  MX_TIM4_Init();
 80002e0:	f000 f92c 	bl	800053c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80002e4:	f000 f984 	bl	80005f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* @@@@@@@@@@@@@@@@@
	TIMER 2 - 50Hz
  @@@@@@@@@@@@@@@@@ */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002e8:	2100      	movs	r1, #0
 80002ea:	4814      	ldr	r0, [pc, #80]	@ (800033c <main+0x74>)
 80002ec:	f001 fbd8 	bl	8001aa0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim2, TIM_CHANNEL_1);
 80002f0:	2100      	movs	r1, #0
 80002f2:	4812      	ldr	r0, [pc, #72]	@ (800033c <main+0x74>)
 80002f4:	f002 f872 	bl	80023dc <HAL_TIMEx_PWMN_Start>
  TIM2->CCR1 = 999; // duty 50%
 80002f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000300:	635a      	str	r2, [r3, #52]	@ 0x34

  /* @@@@@@@@@@@@@@@@@
  	TIMER 3 - 1Hz
  @@@@@@@@@@@@@@@@@ */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000302:	2100      	movs	r1, #0
 8000304:	480e      	ldr	r0, [pc, #56]	@ (8000340 <main+0x78>)
 8000306:	f001 fbcb 	bl	8001aa0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim3, TIM_CHANNEL_1);
 800030a:	2100      	movs	r1, #0
 800030c:	480c      	ldr	r0, [pc, #48]	@ (8000340 <main+0x78>)
 800030e:	f002 f865 	bl	80023dc <HAL_TIMEx_PWMN_Start>
  TIM3->CCR1 = 4999; // duty 50%
 8000312:	4b0c      	ldr	r3, [pc, #48]	@ (8000344 <main+0x7c>)
 8000314:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000318:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_TIM_Base_Start_IT(&htim3); // Timer Interrupt
 800031a:	4809      	ldr	r0, [pc, #36]	@ (8000340 <main+0x78>)
 800031c:	f001 fb1e 	bl	800195c <HAL_TIM_Base_Start_IT>

  /* @@@@@@@@@@@@@@@@@
    TIMER 4 - 200Hz
  @@@@@@@@@@@@@@@@@ */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000320:	2100      	movs	r1, #0
 8000322:	4809      	ldr	r0, [pc, #36]	@ (8000348 <main+0x80>)
 8000324:	f001 fbbc 	bl	8001aa0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim4, TIM_CHANNEL_1);
 8000328:	2100      	movs	r1, #0
 800032a:	4807      	ldr	r0, [pc, #28]	@ (8000348 <main+0x80>)
 800032c:	f002 f856 	bl	80023dc <HAL_TIMEx_PWMN_Start>
  TIM4->CCR1 = 249; // duty 50%
 8000330:	4b06      	ldr	r3, [pc, #24]	@ (800034c <main+0x84>)
 8000332:	22f9      	movs	r2, #249	@ 0xf9
 8000334:	635a      	str	r2, [r3, #52]	@ 0x34

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000336:	bf00      	nop
 8000338:	e7fd      	b.n	8000336 <main+0x6e>
 800033a:	bf00      	nop
 800033c:	20000080 	.word	0x20000080
 8000340:	200000c8 	.word	0x200000c8
 8000344:	40000400 	.word	0x40000400
 8000348:	20000110 	.word	0x20000110
 800034c:	40000800 	.word	0x40000800

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b090      	sub	sp, #64	@ 0x40
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0318 	add.w	r3, r7, #24
 800035a:	2228      	movs	r2, #40	@ 0x28
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f002 fb5e 	bl	8002a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000372:	2302      	movs	r3, #2
 8000374:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000376:	2301      	movs	r3, #1
 8000378:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800037a:	2310      	movs	r3, #16
 800037c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800037e:	2302      	movs	r3, #2
 8000380:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000382:	2300      	movs	r3, #0
 8000384:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000386:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800038a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038c:	f107 0318 	add.w	r3, r7, #24
 8000390:	4618      	mov	r0, r3
 8000392:	f000 fed3 	bl	800113c <HAL_RCC_OscConfig>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800039c:	f000 f9c0 	bl	8000720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a0:	230f      	movs	r3, #15
 80003a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a4:	2302      	movs	r3, #2
 80003a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2102      	movs	r1, #2
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 f940 	bl	8001640 <HAL_RCC_ClockConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003c6:	f000 f9ab 	bl	8000720 <Error_Handler>
  }
}
 80003ca:	bf00      	nop
 80003cc:	3740      	adds	r7, #64	@ 0x40
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
	...

080003d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08a      	sub	sp, #40	@ 0x28
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003da:	f107 0320 	add.w	r3, r7, #32
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]
 80003f2:	615a      	str	r2, [r3, #20]
 80003f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003f6:	4b23      	ldr	r3, [pc, #140]	@ (8000484 <MX_TIM2_Init+0xb0>)
 80003f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 80003fe:	4b21      	ldr	r3, [pc, #132]	@ (8000484 <MX_TIM2_Init+0xb0>)
 8000400:	f240 227f 	movw	r2, #639	@ 0x27f
 8000404:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000406:	4b1f      	ldr	r3, [pc, #124]	@ (8000484 <MX_TIM2_Init+0xb0>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800040c:	4b1d      	ldr	r3, [pc, #116]	@ (8000484 <MX_TIM2_Init+0xb0>)
 800040e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000412:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000414:	4b1b      	ldr	r3, [pc, #108]	@ (8000484 <MX_TIM2_Init+0xb0>)
 8000416:	2200      	movs	r2, #0
 8000418:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800041a:	4b1a      	ldr	r3, [pc, #104]	@ (8000484 <MX_TIM2_Init+0xb0>)
 800041c:	2200      	movs	r2, #0
 800041e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000420:	4818      	ldr	r0, [pc, #96]	@ (8000484 <MX_TIM2_Init+0xb0>)
 8000422:	f001 faed 	bl	8001a00 <HAL_TIM_PWM_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800042c:	f000 f978 	bl	8000720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000430:	2300      	movs	r3, #0
 8000432:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000434:	2300      	movs	r3, #0
 8000436:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000438:	f107 0320 	add.w	r3, r7, #32
 800043c:	4619      	mov	r1, r3
 800043e:	4811      	ldr	r0, [pc, #68]	@ (8000484 <MX_TIM2_Init+0xb0>)
 8000440:	f002 f86a 	bl	8002518 <HAL_TIMEx_MasterConfigSynchronization>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800044a:	f000 f969 	bl	8000720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800044e:	2360      	movs	r3, #96	@ 0x60
 8000450:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000456:	2300      	movs	r3, #0
 8000458:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2200      	movs	r2, #0
 8000462:	4619      	mov	r1, r3
 8000464:	4807      	ldr	r0, [pc, #28]	@ (8000484 <MX_TIM2_Init+0xb0>)
 8000466:	f001 fcc5 	bl	8001df4 <HAL_TIM_PWM_ConfigChannel>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000470:	f000 f956 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000474:	4803      	ldr	r0, [pc, #12]	@ (8000484 <MX_TIM2_Init+0xb0>)
 8000476:	f000 f9d7 	bl	8000828 <HAL_TIM_MspPostInit>

}
 800047a:	bf00      	nop
 800047c:	3728      	adds	r7, #40	@ 0x28
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000080 	.word	0x20000080

08000488 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08a      	sub	sp, #40	@ 0x28
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048e:	f107 0320 	add.w	r3, r7, #32
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]
 80004a6:	615a      	str	r2, [r3, #20]
 80004a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004aa:	4b22      	ldr	r3, [pc, #136]	@ (8000534 <MX_TIM3_Init+0xac>)
 80004ac:	4a22      	ldr	r2, [pc, #136]	@ (8000538 <MX_TIM3_Init+0xb0>)
 80004ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 80004b0:	4b20      	ldr	r3, [pc, #128]	@ (8000534 <MX_TIM3_Init+0xac>)
 80004b2:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 80004b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000534 <MX_TIM3_Init+0xac>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80004be:	4b1d      	ldr	r3, [pc, #116]	@ (8000534 <MX_TIM3_Init+0xac>)
 80004c0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80004c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000534 <MX_TIM3_Init+0xac>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004cc:	4b19      	ldr	r3, [pc, #100]	@ (8000534 <MX_TIM3_Init+0xac>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004d2:	4818      	ldr	r0, [pc, #96]	@ (8000534 <MX_TIM3_Init+0xac>)
 80004d4:	f001 fa94 	bl	8001a00 <HAL_TIM_PWM_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80004de:	f000 f91f 	bl	8000720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e2:	2300      	movs	r3, #0
 80004e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e6:	2300      	movs	r3, #0
 80004e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004ea:	f107 0320 	add.w	r3, r7, #32
 80004ee:	4619      	mov	r1, r3
 80004f0:	4810      	ldr	r0, [pc, #64]	@ (8000534 <MX_TIM3_Init+0xac>)
 80004f2:	f002 f811 	bl	8002518 <HAL_TIMEx_MasterConfigSynchronization>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80004fc:	f000 f910 	bl	8000720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000500:	2360      	movs	r3, #96	@ 0x60
 8000502:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	4619      	mov	r1, r3
 8000516:	4807      	ldr	r0, [pc, #28]	@ (8000534 <MX_TIM3_Init+0xac>)
 8000518:	f001 fc6c 	bl	8001df4 <HAL_TIM_PWM_ConfigChannel>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000522:	f000 f8fd 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000526:	4803      	ldr	r0, [pc, #12]	@ (8000534 <MX_TIM3_Init+0xac>)
 8000528:	f000 f97e 	bl	8000828 <HAL_TIM_MspPostInit>

}
 800052c:	bf00      	nop
 800052e:	3728      	adds	r7, #40	@ 0x28
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	200000c8 	.word	0x200000c8
 8000538:	40000400 	.word	0x40000400

0800053c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	@ 0x28
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]
 800055a:	615a      	str	r2, [r3, #20]
 800055c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800055e:	4b22      	ldr	r3, [pc, #136]	@ (80005e8 <MX_TIM4_Init+0xac>)
 8000560:	4a22      	ldr	r2, [pc, #136]	@ (80005ec <MX_TIM4_Init+0xb0>)
 8000562:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 639;
 8000564:	4b20      	ldr	r3, [pc, #128]	@ (80005e8 <MX_TIM4_Init+0xac>)
 8000566:	f240 227f 	movw	r2, #639	@ 0x27f
 800056a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800056c:	4b1e      	ldr	r3, [pc, #120]	@ (80005e8 <MX_TIM4_Init+0xac>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8000572:	4b1d      	ldr	r3, [pc, #116]	@ (80005e8 <MX_TIM4_Init+0xac>)
 8000574:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000578:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800057a:	4b1b      	ldr	r3, [pc, #108]	@ (80005e8 <MX_TIM4_Init+0xac>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000580:	4b19      	ldr	r3, [pc, #100]	@ (80005e8 <MX_TIM4_Init+0xac>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000586:	4818      	ldr	r0, [pc, #96]	@ (80005e8 <MX_TIM4_Init+0xac>)
 8000588:	f001 fa3a 	bl	8001a00 <HAL_TIM_PWM_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000592:	f000 f8c5 	bl	8000720 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000596:	2300      	movs	r3, #0
 8000598:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059a:	2300      	movs	r3, #0
 800059c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	4619      	mov	r1, r3
 80005a4:	4810      	ldr	r0, [pc, #64]	@ (80005e8 <MX_TIM4_Init+0xac>)
 80005a6:	f001 ffb7 	bl	8002518 <HAL_TIMEx_MasterConfigSynchronization>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80005b0:	f000 f8b6 	bl	8000720 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005b4:	2360      	movs	r3, #96	@ 0x60
 80005b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2200      	movs	r2, #0
 80005c8:	4619      	mov	r1, r3
 80005ca:	4807      	ldr	r0, [pc, #28]	@ (80005e8 <MX_TIM4_Init+0xac>)
 80005cc:	f001 fc12 	bl	8001df4 <HAL_TIM_PWM_ConfigChannel>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80005d6:	f000 f8a3 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80005da:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <MX_TIM4_Init+0xac>)
 80005dc:	f000 f924 	bl	8000828 <HAL_TIM_MspPostInit>

}
 80005e0:	bf00      	nop
 80005e2:	3728      	adds	r7, #40	@ 0x28
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000110 	.word	0x20000110
 80005ec:	40000800 	.word	0x40000800

080005f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f4:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_USART2_UART_Init+0x4c>)
 80005f6:	4a12      	ldr	r2, [pc, #72]	@ (8000640 <MX_USART2_UART_Init+0x50>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005fa:	4b10      	ldr	r3, [pc, #64]	@ (800063c <MX_USART2_UART_Init+0x4c>)
 80005fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000600:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <MX_USART2_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <MX_USART2_UART_Init+0x4c>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <MX_USART2_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b09      	ldr	r3, [pc, #36]	@ (800063c <MX_USART2_UART_Init+0x4c>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b08      	ldr	r3, [pc, #32]	@ (800063c <MX_USART2_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <MX_USART2_UART_Init+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <MX_USART2_UART_Init+0x4c>)
 8000628:	f002 f80a 	bl	8002640 <HAL_UART_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000632:	f000 f875 	bl	8000720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000158 	.word	0x20000158
 8000640:	40004400 	.word	0x40004400

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 0310 	add.w	r3, r7, #16
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000658:	4b2d      	ldr	r3, [pc, #180]	@ (8000710 <MX_GPIO_Init+0xcc>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a2c      	ldr	r2, [pc, #176]	@ (8000710 <MX_GPIO_Init+0xcc>)
 800065e:	f043 0310 	orr.w	r3, r3, #16
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b2a      	ldr	r3, [pc, #168]	@ (8000710 <MX_GPIO_Init+0xcc>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0310 	and.w	r3, r3, #16
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b27      	ldr	r3, [pc, #156]	@ (8000710 <MX_GPIO_Init+0xcc>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a26      	ldr	r2, [pc, #152]	@ (8000710 <MX_GPIO_Init+0xcc>)
 8000676:	f043 0320 	orr.w	r3, r3, #32
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b24      	ldr	r3, [pc, #144]	@ (8000710 <MX_GPIO_Init+0xcc>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0320 	and.w	r3, r3, #32
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	4b21      	ldr	r3, [pc, #132]	@ (8000710 <MX_GPIO_Init+0xcc>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a20      	ldr	r2, [pc, #128]	@ (8000710 <MX_GPIO_Init+0xcc>)
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <MX_GPIO_Init+0xcc>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <MX_GPIO_Init+0xcc>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000710 <MX_GPIO_Init+0xcc>)
 80006a6:	f043 0308 	orr.w	r3, r3, #8
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <MX_GPIO_Init+0xcc>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0308 	and.w	r3, r3, #8
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2120      	movs	r1, #32
 80006bc:	4815      	ldr	r0, [pc, #84]	@ (8000714 <MX_GPIO_Init+0xd0>)
 80006be:	f000 fd03 	bl	80010c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c8:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <MX_GPIO_Init+0xd4>)
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	4619      	mov	r1, r3
 80006d6:	4811      	ldr	r0, [pc, #68]	@ (800071c <MX_GPIO_Init+0xd8>)
 80006d8:	f000 fb72 	bl	8000dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006dc:	2320      	movs	r3, #32
 80006de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2302      	movs	r3, #2
 80006ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	4619      	mov	r1, r3
 80006f2:	4808      	ldr	r0, [pc, #32]	@ (8000714 <MX_GPIO_Init+0xd0>)
 80006f4:	f000 fb64 	bl	8000dc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2100      	movs	r1, #0
 80006fc:	2028      	movs	r0, #40	@ 0x28
 80006fe:	f000 fb28 	bl	8000d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000702:	2028      	movs	r0, #40	@ 0x28
 8000704:	f000 fb41 	bl	8000d8a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000708:	bf00      	nop
 800070a:	3720      	adds	r7, #32
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40021000 	.word	0x40021000
 8000714:	40010800 	.word	0x40010800
 8000718:	10110000 	.word	0x10110000
 800071c:	40011000 	.word	0x40011000

08000720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000724:	b672      	cpsid	i
}
 8000726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <Error_Handler+0x8>

0800072c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000732:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <HAL_MspInit+0x5c>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a14      	ldr	r2, [pc, #80]	@ (8000788 <HAL_MspInit+0x5c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <HAL_MspInit+0x5c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <HAL_MspInit+0x5c>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a0e      	ldr	r2, [pc, #56]	@ (8000788 <HAL_MspInit+0x5c>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <HAL_MspInit+0x5c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000762:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <HAL_MspInit+0x60>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	4a04      	ldr	r2, [pc, #16]	@ (800078c <HAL_MspInit+0x60>)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	40021000 	.word	0x40021000
 800078c:	40010000 	.word	0x40010000

08000790 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007a0:	d10c      	bne.n	80007bc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007a2:	4b1e      	ldr	r3, [pc, #120]	@ (800081c <HAL_TIM_PWM_MspInit+0x8c>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	4a1d      	ldr	r2, [pc, #116]	@ (800081c <HAL_TIM_PWM_MspInit+0x8c>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	61d3      	str	r3, [r2, #28]
 80007ae:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <HAL_TIM_PWM_MspInit+0x8c>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80007ba:	e02a      	b.n	8000812 <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM3)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a17      	ldr	r2, [pc, #92]	@ (8000820 <HAL_TIM_PWM_MspInit+0x90>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d114      	bne.n	80007f0 <HAL_TIM_PWM_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007c6:	4b15      	ldr	r3, [pc, #84]	@ (800081c <HAL_TIM_PWM_MspInit+0x8c>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a14      	ldr	r2, [pc, #80]	@ (800081c <HAL_TIM_PWM_MspInit+0x8c>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b12      	ldr	r3, [pc, #72]	@ (800081c <HAL_TIM_PWM_MspInit+0x8c>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	201d      	movs	r0, #29
 80007e4:	f000 fab5 	bl	8000d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007e8:	201d      	movs	r0, #29
 80007ea:	f000 face 	bl	8000d8a <HAL_NVIC_EnableIRQ>
}
 80007ee:	e010      	b.n	8000812 <HAL_TIM_PWM_MspInit+0x82>
  else if(htim_pwm->Instance==TIM4)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000824 <HAL_TIM_PWM_MspInit+0x94>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d10b      	bne.n	8000812 <HAL_TIM_PWM_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <HAL_TIM_PWM_MspInit+0x8c>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	4a07      	ldr	r2, [pc, #28]	@ (800081c <HAL_TIM_PWM_MspInit+0x8c>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	61d3      	str	r3, [r2, #28]
 8000806:	4b05      	ldr	r3, [pc, #20]	@ (800081c <HAL_TIM_PWM_MspInit+0x8c>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
}
 8000812:	bf00      	nop
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000
 8000820:	40000400 	.word	0x40000400
 8000824:	40000800 	.word	0x40000800

08000828 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	@ 0x28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0318 	add.w	r3, r7, #24
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000846:	d118      	bne.n	800087a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b2b      	ldr	r3, [pc, #172]	@ (80008f8 <HAL_TIM_MspPostInit+0xd0>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a2a      	ldr	r2, [pc, #168]	@ (80008f8 <HAL_TIM_MspPostInit+0xd0>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b28      	ldr	r3, [pc, #160]	@ (80008f8 <HAL_TIM_MspPostInit+0xd0>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000860:	2301      	movs	r3, #1
 8000862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2302      	movs	r3, #2
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0318 	add.w	r3, r7, #24
 8000870:	4619      	mov	r1, r3
 8000872:	4822      	ldr	r0, [pc, #136]	@ (80008fc <HAL_TIM_MspPostInit+0xd4>)
 8000874:	f000 faa4 	bl	8000dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000878:	e03a      	b.n	80008f0 <HAL_TIM_MspPostInit+0xc8>
  else if(htim->Instance==TIM3)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a20      	ldr	r2, [pc, #128]	@ (8000900 <HAL_TIM_MspPostInit+0xd8>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d118      	bne.n	80008b6 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <HAL_TIM_MspPostInit+0xd0>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a1b      	ldr	r2, [pc, #108]	@ (80008f8 <HAL_TIM_MspPostInit+0xd0>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <HAL_TIM_MspPostInit+0xd0>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800089c:	2340      	movs	r3, #64	@ 0x40
 800089e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2302      	movs	r3, #2
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0318 	add.w	r3, r7, #24
 80008ac:	4619      	mov	r1, r3
 80008ae:	4813      	ldr	r0, [pc, #76]	@ (80008fc <HAL_TIM_MspPostInit+0xd4>)
 80008b0:	f000 fa86 	bl	8000dc0 <HAL_GPIO_Init>
}
 80008b4:	e01c      	b.n	80008f0 <HAL_TIM_MspPostInit+0xc8>
  else if(htim->Instance==TIM4)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a12      	ldr	r2, [pc, #72]	@ (8000904 <HAL_TIM_MspPostInit+0xdc>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d117      	bne.n	80008f0 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c0:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <HAL_TIM_MspPostInit+0xd0>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a0c      	ldr	r2, [pc, #48]	@ (80008f8 <HAL_TIM_MspPostInit+0xd0>)
 80008c6:	f043 0308 	orr.w	r3, r3, #8
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b0a      	ldr	r3, [pc, #40]	@ (80008f8 <HAL_TIM_MspPostInit+0xd0>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008d8:	2340      	movs	r3, #64	@ 0x40
 80008da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2302      	movs	r3, #2
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	4619      	mov	r1, r3
 80008ea:	4807      	ldr	r0, [pc, #28]	@ (8000908 <HAL_TIM_MspPostInit+0xe0>)
 80008ec:	f000 fa68 	bl	8000dc0 <HAL_GPIO_Init>
}
 80008f0:	bf00      	nop
 80008f2:	3728      	adds	r7, #40	@ 0x28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40010800 	.word	0x40010800
 8000900:	40000400 	.word	0x40000400
 8000904:	40000800 	.word	0x40000800
 8000908:	40010c00 	.word	0x40010c00

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a1b      	ldr	r2, [pc, #108]	@ (8000994 <HAL_UART_MspInit+0x88>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d12f      	bne.n	800098c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800092c:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <HAL_UART_MspInit+0x8c>)
 800092e:	69db      	ldr	r3, [r3, #28]
 8000930:	4a19      	ldr	r2, [pc, #100]	@ (8000998 <HAL_UART_MspInit+0x8c>)
 8000932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000936:	61d3      	str	r3, [r2, #28]
 8000938:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <HAL_UART_MspInit+0x8c>)
 800093a:	69db      	ldr	r3, [r3, #28]
 800093c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <HAL_UART_MspInit+0x8c>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a13      	ldr	r2, [pc, #76]	@ (8000998 <HAL_UART_MspInit+0x8c>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <HAL_UART_MspInit+0x8c>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800095c:	2304      	movs	r3, #4
 800095e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	4619      	mov	r1, r3
 800096e:	480b      	ldr	r0, [pc, #44]	@ (800099c <HAL_UART_MspInit+0x90>)
 8000970:	f000 fa26 	bl	8000dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000974:	2308      	movs	r3, #8
 8000976:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	4619      	mov	r1, r3
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <HAL_UART_MspInit+0x90>)
 8000988:	f000 fa1a 	bl	8000dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800098c:	bf00      	nop
 800098e:	3720      	adds	r7, #32
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40004400 	.word	0x40004400
 8000998:	40021000 	.word	0x40021000
 800099c:	40010800 	.word	0x40010800

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <NMI_Handler+0x4>

080009a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <MemManage_Handler+0x4>

080009b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <BusFault_Handler+0x4>

080009c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <UsageFault_Handler+0x4>

080009c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 f8bc 	bl	8000b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009fc:	4802      	ldr	r0, [pc, #8]	@ (8000a08 <TIM3_IRQHandler+0x10>)
 80009fe:	f001 f8f1 	bl	8001be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000c8 	.word	0x200000c8

08000a0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a10:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a14:	f000 fb70 	bl	80010f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a24:	4a14      	ldr	r2, [pc, #80]	@ (8000a78 <_sbrk+0x5c>)
 8000a26:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <_sbrk+0x60>)
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a30:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d102      	bne.n	8000a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <_sbrk+0x64>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	@ (8000a84 <_sbrk+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3e:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d207      	bcs.n	8000a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a4c:	f001 fff0 	bl	8002a30 <__errno>
 8000a50:	4603      	mov	r3, r0
 8000a52:	220c      	movs	r2, #12
 8000a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5a:	e009      	b.n	8000a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a62:	4b07      	ldr	r3, [pc, #28]	@ (8000a80 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	4a05      	ldr	r2, [pc, #20]	@ (8000a80 <_sbrk+0x64>)
 8000a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20005000 	.word	0x20005000
 8000a7c:	00000400 	.word	0x00000400
 8000a80:	20000284 	.word	0x20000284
 8000a84:	200003d8 	.word	0x200003d8

08000a88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a94:	f7ff fff8 	bl	8000a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a98:	480b      	ldr	r0, [pc, #44]	@ (8000ac8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a9a:	490c      	ldr	r1, [pc, #48]	@ (8000acc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a09      	ldr	r2, [pc, #36]	@ (8000ad4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ab0:	4c09      	ldr	r4, [pc, #36]	@ (8000ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000abe:	f001 ffbd 	bl	8002a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ac2:	f7ff fc01 	bl	80002c8 <main>
  bx lr
 8000ac6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ad0:	0800342c 	.word	0x0800342c
  ldr r2, =_sbss
 8000ad4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000ad8:	200003d4 	.word	0x200003d4

08000adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC1_2_IRQHandler>
	...

08000ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <HAL_Init+0x28>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	@ (8000b08 <HAL_Init+0x28>)
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f923 	bl	8000d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f000 f808 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f7ff fe16 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40022000 	.word	0x40022000

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <HAL_InitTick+0x54>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_InitTick+0x58>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f93b 	bl	8000da6 <HAL_SYSTICK_Config>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00e      	b.n	8000b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d80a      	bhi.n	8000b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f000 f903 	bl	8000d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4a06      	ldr	r2, [pc, #24]	@ (8000b68 <HAL_InitTick+0x5c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000010 	.word	0x20000010
 8000b68:	2000000c 	.word	0x2000000c

08000b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <HAL_IncTick+0x1c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b05      	ldr	r3, [pc, #20]	@ (8000b8c <HAL_IncTick+0x20>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a03      	ldr	r2, [pc, #12]	@ (8000b8c <HAL_IncTick+0x20>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	20000010 	.word	0x20000010
 8000b8c:	20000288 	.word	0x20000288

08000b90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b02      	ldr	r3, [pc, #8]	@ (8000ba0 <HAL_GetTick+0x10>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	20000288 	.word	0x20000288

08000ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	@ (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0b      	blt.n	8000c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4906      	ldr	r1, [pc, #24]	@ (8000c3c <__NVIC_EnableIRQ+0x34>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	@ (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	@ (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	@ 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	@ 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d08:	d301      	bcc.n	8000d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e00f      	b.n	8000d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d38 <SysTick_Config+0x40>)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d16:	210f      	movs	r1, #15
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	f7ff ff90 	bl	8000c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d20:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <SysTick_Config+0x40>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d26:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <SysTick_Config+0x40>)
 8000d28:	2207      	movs	r2, #7
 8000d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	e000e010 	.word	0xe000e010

08000d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ff2d 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b086      	sub	sp, #24
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	4603      	mov	r3, r0
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d64:	f7ff ff42 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	68b9      	ldr	r1, [r7, #8]
 8000d6e:	6978      	ldr	r0, [r7, #20]
 8000d70:	f7ff ff90 	bl	8000c94 <NVIC_EncodePriority>
 8000d74:	4602      	mov	r2, r0
 8000d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff5f 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff35 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ffa2 	bl	8000cf8 <SysTick_Config>
 8000db4:	4603      	mov	r3, r0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b08b      	sub	sp, #44	@ 0x2c
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd2:	e169      	b.n	80010a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	f040 8158 	bne.w	80010a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	4a9a      	ldr	r2, [pc, #616]	@ (8001060 <HAL_GPIO_Init+0x2a0>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d05e      	beq.n	8000eba <HAL_GPIO_Init+0xfa>
 8000dfc:	4a98      	ldr	r2, [pc, #608]	@ (8001060 <HAL_GPIO_Init+0x2a0>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d875      	bhi.n	8000eee <HAL_GPIO_Init+0x12e>
 8000e02:	4a98      	ldr	r2, [pc, #608]	@ (8001064 <HAL_GPIO_Init+0x2a4>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d058      	beq.n	8000eba <HAL_GPIO_Init+0xfa>
 8000e08:	4a96      	ldr	r2, [pc, #600]	@ (8001064 <HAL_GPIO_Init+0x2a4>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d86f      	bhi.n	8000eee <HAL_GPIO_Init+0x12e>
 8000e0e:	4a96      	ldr	r2, [pc, #600]	@ (8001068 <HAL_GPIO_Init+0x2a8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d052      	beq.n	8000eba <HAL_GPIO_Init+0xfa>
 8000e14:	4a94      	ldr	r2, [pc, #592]	@ (8001068 <HAL_GPIO_Init+0x2a8>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d869      	bhi.n	8000eee <HAL_GPIO_Init+0x12e>
 8000e1a:	4a94      	ldr	r2, [pc, #592]	@ (800106c <HAL_GPIO_Init+0x2ac>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d04c      	beq.n	8000eba <HAL_GPIO_Init+0xfa>
 8000e20:	4a92      	ldr	r2, [pc, #584]	@ (800106c <HAL_GPIO_Init+0x2ac>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d863      	bhi.n	8000eee <HAL_GPIO_Init+0x12e>
 8000e26:	4a92      	ldr	r2, [pc, #584]	@ (8001070 <HAL_GPIO_Init+0x2b0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d046      	beq.n	8000eba <HAL_GPIO_Init+0xfa>
 8000e2c:	4a90      	ldr	r2, [pc, #576]	@ (8001070 <HAL_GPIO_Init+0x2b0>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d85d      	bhi.n	8000eee <HAL_GPIO_Init+0x12e>
 8000e32:	2b12      	cmp	r3, #18
 8000e34:	d82a      	bhi.n	8000e8c <HAL_GPIO_Init+0xcc>
 8000e36:	2b12      	cmp	r3, #18
 8000e38:	d859      	bhi.n	8000eee <HAL_GPIO_Init+0x12e>
 8000e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e40 <HAL_GPIO_Init+0x80>)
 8000e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e40:	08000ebb 	.word	0x08000ebb
 8000e44:	08000e95 	.word	0x08000e95
 8000e48:	08000ea7 	.word	0x08000ea7
 8000e4c:	08000ee9 	.word	0x08000ee9
 8000e50:	08000eef 	.word	0x08000eef
 8000e54:	08000eef 	.word	0x08000eef
 8000e58:	08000eef 	.word	0x08000eef
 8000e5c:	08000eef 	.word	0x08000eef
 8000e60:	08000eef 	.word	0x08000eef
 8000e64:	08000eef 	.word	0x08000eef
 8000e68:	08000eef 	.word	0x08000eef
 8000e6c:	08000eef 	.word	0x08000eef
 8000e70:	08000eef 	.word	0x08000eef
 8000e74:	08000eef 	.word	0x08000eef
 8000e78:	08000eef 	.word	0x08000eef
 8000e7c:	08000eef 	.word	0x08000eef
 8000e80:	08000eef 	.word	0x08000eef
 8000e84:	08000e9d 	.word	0x08000e9d
 8000e88:	08000eb1 	.word	0x08000eb1
 8000e8c:	4a79      	ldr	r2, [pc, #484]	@ (8001074 <HAL_GPIO_Init+0x2b4>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d013      	beq.n	8000eba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e92:	e02c      	b.n	8000eee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	623b      	str	r3, [r7, #32]
          break;
 8000e9a:	e029      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	623b      	str	r3, [r7, #32]
          break;
 8000ea4:	e024      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	3308      	adds	r3, #8
 8000eac:	623b      	str	r3, [r7, #32]
          break;
 8000eae:	e01f      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	330c      	adds	r3, #12
 8000eb6:	623b      	str	r3, [r7, #32]
          break;
 8000eb8:	e01a      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d102      	bne.n	8000ec8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	623b      	str	r3, [r7, #32]
          break;
 8000ec6:	e013      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d105      	bne.n	8000edc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	69fa      	ldr	r2, [r7, #28]
 8000ed8:	611a      	str	r2, [r3, #16]
          break;
 8000eda:	e009      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000edc:	2308      	movs	r3, #8
 8000ede:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69fa      	ldr	r2, [r7, #28]
 8000ee4:	615a      	str	r2, [r3, #20]
          break;
 8000ee6:	e003      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
          break;
 8000eec:	e000      	b.n	8000ef0 <HAL_GPIO_Init+0x130>
          break;
 8000eee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	2bff      	cmp	r3, #255	@ 0xff
 8000ef4:	d801      	bhi.n	8000efa <HAL_GPIO_Init+0x13a>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	e001      	b.n	8000efe <HAL_GPIO_Init+0x13e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3304      	adds	r3, #4
 8000efe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	2bff      	cmp	r3, #255	@ 0xff
 8000f04:	d802      	bhi.n	8000f0c <HAL_GPIO_Init+0x14c>
 8000f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	e002      	b.n	8000f12 <HAL_GPIO_Init+0x152>
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0e:	3b08      	subs	r3, #8
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	210f      	movs	r1, #15
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	401a      	ands	r2, r3
 8000f24:	6a39      	ldr	r1, [r7, #32]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 80b1 	beq.w	80010a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f40:	4b4d      	ldr	r3, [pc, #308]	@ (8001078 <HAL_GPIO_Init+0x2b8>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a4c      	ldr	r2, [pc, #304]	@ (8001078 <HAL_GPIO_Init+0x2b8>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001078 <HAL_GPIO_Init+0x2b8>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f58:	4a48      	ldr	r2, [pc, #288]	@ (800107c <HAL_GPIO_Init+0x2bc>)
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	220f      	movs	r2, #15
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a40      	ldr	r2, [pc, #256]	@ (8001080 <HAL_GPIO_Init+0x2c0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d013      	beq.n	8000fac <HAL_GPIO_Init+0x1ec>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a3f      	ldr	r2, [pc, #252]	@ (8001084 <HAL_GPIO_Init+0x2c4>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d00d      	beq.n	8000fa8 <HAL_GPIO_Init+0x1e8>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a3e      	ldr	r2, [pc, #248]	@ (8001088 <HAL_GPIO_Init+0x2c8>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d007      	beq.n	8000fa4 <HAL_GPIO_Init+0x1e4>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a3d      	ldr	r2, [pc, #244]	@ (800108c <HAL_GPIO_Init+0x2cc>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d101      	bne.n	8000fa0 <HAL_GPIO_Init+0x1e0>
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e006      	b.n	8000fae <HAL_GPIO_Init+0x1ee>
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	e004      	b.n	8000fae <HAL_GPIO_Init+0x1ee>
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	e002      	b.n	8000fae <HAL_GPIO_Init+0x1ee>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e000      	b.n	8000fae <HAL_GPIO_Init+0x1ee>
 8000fac:	2300      	movs	r3, #0
 8000fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fb0:	f002 0203 	and.w	r2, r2, #3
 8000fb4:	0092      	lsls	r2, r2, #2
 8000fb6:	4093      	lsls	r3, r2
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fbe:	492f      	ldr	r1, [pc, #188]	@ (800107c <HAL_GPIO_Init+0x2bc>)
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d006      	beq.n	8000fe6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001090 <HAL_GPIO_Init+0x2d0>)
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	492c      	ldr	r1, [pc, #176]	@ (8001090 <HAL_GPIO_Init+0x2d0>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	608b      	str	r3, [r1, #8]
 8000fe4:	e006      	b.n	8000ff4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8001090 <HAL_GPIO_Init+0x2d0>)
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	4928      	ldr	r1, [pc, #160]	@ (8001090 <HAL_GPIO_Init+0x2d0>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d006      	beq.n	800100e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001000:	4b23      	ldr	r3, [pc, #140]	@ (8001090 <HAL_GPIO_Init+0x2d0>)
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	4922      	ldr	r1, [pc, #136]	@ (8001090 <HAL_GPIO_Init+0x2d0>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	60cb      	str	r3, [r1, #12]
 800100c:	e006      	b.n	800101c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800100e:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <HAL_GPIO_Init+0x2d0>)
 8001010:	68da      	ldr	r2, [r3, #12]
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	43db      	mvns	r3, r3
 8001016:	491e      	ldr	r1, [pc, #120]	@ (8001090 <HAL_GPIO_Init+0x2d0>)
 8001018:	4013      	ands	r3, r2
 800101a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d006      	beq.n	8001036 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <HAL_GPIO_Init+0x2d0>)
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	4918      	ldr	r1, [pc, #96]	@ (8001090 <HAL_GPIO_Init+0x2d0>)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	604b      	str	r3, [r1, #4]
 8001034:	e006      	b.n	8001044 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001036:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <HAL_GPIO_Init+0x2d0>)
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	43db      	mvns	r3, r3
 800103e:	4914      	ldr	r1, [pc, #80]	@ (8001090 <HAL_GPIO_Init+0x2d0>)
 8001040:	4013      	ands	r3, r2
 8001042:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d021      	beq.n	8001094 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <HAL_GPIO_Init+0x2d0>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	490e      	ldr	r1, [pc, #56]	@ (8001090 <HAL_GPIO_Init+0x2d0>)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	600b      	str	r3, [r1, #0]
 800105c:	e021      	b.n	80010a2 <HAL_GPIO_Init+0x2e2>
 800105e:	bf00      	nop
 8001060:	10320000 	.word	0x10320000
 8001064:	10310000 	.word	0x10310000
 8001068:	10220000 	.word	0x10220000
 800106c:	10210000 	.word	0x10210000
 8001070:	10120000 	.word	0x10120000
 8001074:	10110000 	.word	0x10110000
 8001078:	40021000 	.word	0x40021000
 800107c:	40010000 	.word	0x40010000
 8001080:	40010800 	.word	0x40010800
 8001084:	40010c00 	.word	0x40010c00
 8001088:	40011000 	.word	0x40011000
 800108c:	40011400 	.word	0x40011400
 8001090:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <HAL_GPIO_Init+0x304>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	43db      	mvns	r3, r3
 800109c:	4909      	ldr	r1, [pc, #36]	@ (80010c4 <HAL_GPIO_Init+0x304>)
 800109e:	4013      	ands	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a4:	3301      	adds	r3, #1
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ae:	fa22 f303 	lsr.w	r3, r2, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f47f ae8e 	bne.w	8000dd4 <HAL_GPIO_Init+0x14>
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	372c      	adds	r7, #44	@ 0x2c
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	40010400 	.word	0x40010400

080010c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
 80010d4:	4613      	mov	r3, r2
 80010d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010d8:	787b      	ldrb	r3, [r7, #1]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010e4:	e003      	b.n	80010ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010e6:	887b      	ldrh	r3, [r7, #2]
 80010e8:	041a      	lsls	r2, r3, #16
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	611a      	str	r2, [r3, #16]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	4013      	ands	r3, r2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d006      	beq.n	800111c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800110e:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f806 	bl	8001128 <HAL_GPIO_EXTI_Callback>
  }
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40010400 	.word	0x40010400

08001128 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e272      	b.n	8001634 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 8087 	beq.w	800126a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800115c:	4b92      	ldr	r3, [pc, #584]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 030c 	and.w	r3, r3, #12
 8001164:	2b04      	cmp	r3, #4
 8001166:	d00c      	beq.n	8001182 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001168:	4b8f      	ldr	r3, [pc, #572]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 030c 	and.w	r3, r3, #12
 8001170:	2b08      	cmp	r3, #8
 8001172:	d112      	bne.n	800119a <HAL_RCC_OscConfig+0x5e>
 8001174:	4b8c      	ldr	r3, [pc, #560]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800117c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001180:	d10b      	bne.n	800119a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001182:	4b89      	ldr	r3, [pc, #548]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d06c      	beq.n	8001268 <HAL_RCC_OscConfig+0x12c>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d168      	bne.n	8001268 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e24c      	b.n	8001634 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011a2:	d106      	bne.n	80011b2 <HAL_RCC_OscConfig+0x76>
 80011a4:	4b80      	ldr	r3, [pc, #512]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a7f      	ldr	r2, [pc, #508]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 80011aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	e02e      	b.n	8001210 <HAL_RCC_OscConfig+0xd4>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10c      	bne.n	80011d4 <HAL_RCC_OscConfig+0x98>
 80011ba:	4b7b      	ldr	r3, [pc, #492]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a7a      	ldr	r2, [pc, #488]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	4b78      	ldr	r3, [pc, #480]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a77      	ldr	r2, [pc, #476]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e01d      	b.n	8001210 <HAL_RCC_OscConfig+0xd4>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011dc:	d10c      	bne.n	80011f8 <HAL_RCC_OscConfig+0xbc>
 80011de:	4b72      	ldr	r3, [pc, #456]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a71      	ldr	r2, [pc, #452]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	4b6f      	ldr	r3, [pc, #444]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a6e      	ldr	r2, [pc, #440]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e00b      	b.n	8001210 <HAL_RCC_OscConfig+0xd4>
 80011f8:	4b6b      	ldr	r3, [pc, #428]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a6a      	ldr	r2, [pc, #424]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 80011fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b68      	ldr	r3, [pc, #416]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a67      	ldr	r2, [pc, #412]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 800120a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800120e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d013      	beq.n	8001240 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fcba 	bl	8000b90 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001220:	f7ff fcb6 	bl	8000b90 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b64      	cmp	r3, #100	@ 0x64
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e200      	b.n	8001634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001232:	4b5d      	ldr	r3, [pc, #372]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0f0      	beq.n	8001220 <HAL_RCC_OscConfig+0xe4>
 800123e:	e014      	b.n	800126a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001240:	f7ff fca6 	bl	8000b90 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001248:	f7ff fca2 	bl	8000b90 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b64      	cmp	r3, #100	@ 0x64
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e1ec      	b.n	8001634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125a:	4b53      	ldr	r3, [pc, #332]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0x10c>
 8001266:	e000      	b.n	800126a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d063      	beq.n	800133e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001276:	4b4c      	ldr	r3, [pc, #304]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 030c 	and.w	r3, r3, #12
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00b      	beq.n	800129a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001282:	4b49      	ldr	r3, [pc, #292]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b08      	cmp	r3, #8
 800128c:	d11c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x18c>
 800128e:	4b46      	ldr	r3, [pc, #280]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d116      	bne.n	80012c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129a:	4b43      	ldr	r3, [pc, #268]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d005      	beq.n	80012b2 <HAL_RCC_OscConfig+0x176>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d001      	beq.n	80012b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e1c0      	b.n	8001634 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b2:	4b3d      	ldr	r3, [pc, #244]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	4939      	ldr	r1, [pc, #228]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c6:	e03a      	b.n	800133e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d020      	beq.n	8001312 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d0:	4b36      	ldr	r3, [pc, #216]	@ (80013ac <HAL_RCC_OscConfig+0x270>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d6:	f7ff fc5b 	bl	8000b90 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012de:	f7ff fc57 	bl	8000b90 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e1a1      	b.n	8001634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f0:	4b2d      	ldr	r3, [pc, #180]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fc:	4b2a      	ldr	r3, [pc, #168]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	4927      	ldr	r1, [pc, #156]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 800130c:	4313      	orrs	r3, r2
 800130e:	600b      	str	r3, [r1, #0]
 8001310:	e015      	b.n	800133e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001312:	4b26      	ldr	r3, [pc, #152]	@ (80013ac <HAL_RCC_OscConfig+0x270>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fc3a 	bl	8000b90 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001320:	f7ff fc36 	bl	8000b90 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e180      	b.n	8001634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001332:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	2b00      	cmp	r3, #0
 8001348:	d03a      	beq.n	80013c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d019      	beq.n	8001386 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001352:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <HAL_RCC_OscConfig+0x274>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001358:	f7ff fc1a 	bl	8000b90 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001360:	f7ff fc16 	bl	8000b90 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e160      	b.n	8001634 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001372:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <HAL_RCC_OscConfig+0x26c>)
 8001374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800137e:	2001      	movs	r0, #1
 8001380:	f000 face 	bl	8001920 <RCC_Delay>
 8001384:	e01c      	b.n	80013c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001386:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <HAL_RCC_OscConfig+0x274>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138c:	f7ff fc00 	bl	8000b90 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001392:	e00f      	b.n	80013b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001394:	f7ff fbfc 	bl	8000b90 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d908      	bls.n	80013b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e146      	b.n	8001634 <HAL_RCC_OscConfig+0x4f8>
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000
 80013ac:	42420000 	.word	0x42420000
 80013b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b4:	4b92      	ldr	r3, [pc, #584]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 80013b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1e9      	bne.n	8001394 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80a6 	beq.w	800151a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10d      	bne.n	80013fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	4b88      	ldr	r3, [pc, #544]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a87      	ldr	r2, [pc, #540]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e8:	61d3      	str	r3, [r2, #28]
 80013ea:	4b85      	ldr	r3, [pc, #532]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013f6:	2301      	movs	r3, #1
 80013f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fa:	4b82      	ldr	r3, [pc, #520]	@ (8001604 <HAL_RCC_OscConfig+0x4c8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d118      	bne.n	8001438 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001406:	4b7f      	ldr	r3, [pc, #508]	@ (8001604 <HAL_RCC_OscConfig+0x4c8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a7e      	ldr	r2, [pc, #504]	@ (8001604 <HAL_RCC_OscConfig+0x4c8>)
 800140c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001412:	f7ff fbbd 	bl	8000b90 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141a:	f7ff fbb9 	bl	8000b90 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b64      	cmp	r3, #100	@ 0x64
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e103      	b.n	8001634 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142c:	4b75      	ldr	r3, [pc, #468]	@ (8001604 <HAL_RCC_OscConfig+0x4c8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0f0      	beq.n	800141a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d106      	bne.n	800144e <HAL_RCC_OscConfig+0x312>
 8001440:	4b6f      	ldr	r3, [pc, #444]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	4a6e      	ldr	r2, [pc, #440]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6213      	str	r3, [r2, #32]
 800144c:	e02d      	b.n	80014aa <HAL_RCC_OscConfig+0x36e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10c      	bne.n	8001470 <HAL_RCC_OscConfig+0x334>
 8001456:	4b6a      	ldr	r3, [pc, #424]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	4a69      	ldr	r2, [pc, #420]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 800145c:	f023 0301 	bic.w	r3, r3, #1
 8001460:	6213      	str	r3, [r2, #32]
 8001462:	4b67      	ldr	r3, [pc, #412]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	4a66      	ldr	r2, [pc, #408]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 8001468:	f023 0304 	bic.w	r3, r3, #4
 800146c:	6213      	str	r3, [r2, #32]
 800146e:	e01c      	b.n	80014aa <HAL_RCC_OscConfig+0x36e>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	2b05      	cmp	r3, #5
 8001476:	d10c      	bne.n	8001492 <HAL_RCC_OscConfig+0x356>
 8001478:	4b61      	ldr	r3, [pc, #388]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	4a60      	ldr	r2, [pc, #384]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	6213      	str	r3, [r2, #32]
 8001484:	4b5e      	ldr	r3, [pc, #376]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	4a5d      	ldr	r2, [pc, #372]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6213      	str	r3, [r2, #32]
 8001490:	e00b      	b.n	80014aa <HAL_RCC_OscConfig+0x36e>
 8001492:	4b5b      	ldr	r3, [pc, #364]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4a5a      	ldr	r2, [pc, #360]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 8001498:	f023 0301 	bic.w	r3, r3, #1
 800149c:	6213      	str	r3, [r2, #32]
 800149e:	4b58      	ldr	r3, [pc, #352]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	4a57      	ldr	r2, [pc, #348]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	f023 0304 	bic.w	r3, r3, #4
 80014a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d015      	beq.n	80014de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b2:	f7ff fb6d 	bl	8000b90 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b8:	e00a      	b.n	80014d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ba:	f7ff fb69 	bl	8000b90 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e0b1      	b.n	8001634 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0ee      	beq.n	80014ba <HAL_RCC_OscConfig+0x37e>
 80014dc:	e014      	b.n	8001508 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff fb57 	bl	8000b90 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e4:	e00a      	b.n	80014fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e6:	f7ff fb53 	bl	8000b90 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e09b      	b.n	8001634 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fc:	4b40      	ldr	r3, [pc, #256]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1ee      	bne.n	80014e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001508:	7dfb      	ldrb	r3, [r7, #23]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d105      	bne.n	800151a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800150e:	4b3c      	ldr	r3, [pc, #240]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4a3b      	ldr	r2, [pc, #236]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 8001514:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001518:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 8087 	beq.w	8001632 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001524:	4b36      	ldr	r3, [pc, #216]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	2b08      	cmp	r3, #8
 800152e:	d061      	beq.n	80015f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d146      	bne.n	80015c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001538:	4b33      	ldr	r3, [pc, #204]	@ (8001608 <HAL_RCC_OscConfig+0x4cc>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153e:	f7ff fb27 	bl	8000b90 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001546:	f7ff fb23 	bl	8000b90 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e06d      	b.n	8001634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001558:	4b29      	ldr	r3, [pc, #164]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f0      	bne.n	8001546 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800156c:	d108      	bne.n	8001580 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800156e:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	4921      	ldr	r1, [pc, #132]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001580:	4b1f      	ldr	r3, [pc, #124]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a19      	ldr	r1, [r3, #32]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001590:	430b      	orrs	r3, r1
 8001592:	491b      	ldr	r1, [pc, #108]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001598:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <HAL_RCC_OscConfig+0x4cc>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff faf7 	bl	8000b90 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a6:	f7ff faf3 	bl	8000b90 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e03d      	b.n	8001634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015b8:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x46a>
 80015c4:	e035      	b.n	8001632 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <HAL_RCC_OscConfig+0x4cc>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fae0 	bl	8000b90 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d4:	f7ff fadc 	bl	8000b90 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e026      	b.n	8001634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e6:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x498>
 80015f2:	e01e      	b.n	8001632 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d107      	bne.n	800160c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e019      	b.n	8001634 <HAL_RCC_OscConfig+0x4f8>
 8001600:	40021000 	.word	0x40021000
 8001604:	40007000 	.word	0x40007000
 8001608:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800160c:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <HAL_RCC_OscConfig+0x500>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	429a      	cmp	r2, r3
 800161e:	d106      	bne.n	800162e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162a:	429a      	cmp	r2, r3
 800162c:	d001      	beq.n	8001632 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000

08001640 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0d0      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001654:	4b6a      	ldr	r3, [pc, #424]	@ (8001800 <HAL_RCC_ClockConfig+0x1c0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d910      	bls.n	8001684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001662:	4b67      	ldr	r3, [pc, #412]	@ (8001800 <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f023 0207 	bic.w	r2, r3, #7
 800166a:	4965      	ldr	r1, [pc, #404]	@ (8001800 <HAL_RCC_ClockConfig+0x1c0>)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001672:	4b63      	ldr	r3, [pc, #396]	@ (8001800 <HAL_RCC_ClockConfig+0x1c0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d001      	beq.n	8001684 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0b8      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d020      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800169c:	4b59      	ldr	r3, [pc, #356]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	4a58      	ldr	r2, [pc, #352]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b4:	4b53      	ldr	r3, [pc, #332]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4a52      	ldr	r2, [pc, #328]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80016be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c0:	4b50      	ldr	r3, [pc, #320]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	494d      	ldr	r1, [pc, #308]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d040      	beq.n	8001760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4b47      	ldr	r3, [pc, #284]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d115      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e07f      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fe:	4b41      	ldr	r3, [pc, #260]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d109      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e073      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170e:	4b3d      	ldr	r3, [pc, #244]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e06b      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800171e:	4b39      	ldr	r3, [pc, #228]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f023 0203 	bic.w	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4936      	ldr	r1, [pc, #216]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001730:	f7ff fa2e 	bl	8000b90 <HAL_GetTick>
 8001734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	e00a      	b.n	800174e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001738:	f7ff fa2a 	bl	8000b90 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e053      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 020c 	and.w	r2, r3, #12
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	429a      	cmp	r2, r3
 800175e:	d1eb      	bne.n	8001738 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001760:	4b27      	ldr	r3, [pc, #156]	@ (8001800 <HAL_RCC_ClockConfig+0x1c0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d210      	bcs.n	8001790 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 0207 	bic.w	r2, r3, #7
 8001776:	4922      	ldr	r1, [pc, #136]	@ (8001800 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	4313      	orrs	r3, r2
 800177c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	4b20      	ldr	r3, [pc, #128]	@ (8001800 <HAL_RCC_ClockConfig+0x1c0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d001      	beq.n	8001790 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e032      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800179c:	4b19      	ldr	r3, [pc, #100]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	4916      	ldr	r1, [pc, #88]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d009      	beq.n	80017ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017ba:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	490e      	ldr	r1, [pc, #56]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ce:	f000 f821 	bl	8001814 <HAL_RCC_GetSysClockFreq>
 80017d2:	4602      	mov	r2, r0
 80017d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	490a      	ldr	r1, [pc, #40]	@ (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80017e0:	5ccb      	ldrb	r3, [r1, r3]
 80017e2:	fa22 f303 	lsr.w	r3, r2, r3
 80017e6:	4a09      	ldr	r2, [pc, #36]	@ (800180c <HAL_RCC_ClockConfig+0x1cc>)
 80017e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017ea:	4b09      	ldr	r3, [pc, #36]	@ (8001810 <HAL_RCC_ClockConfig+0x1d0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff f98c 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40022000 	.word	0x40022000
 8001804:	40021000 	.word	0x40021000
 8001808:	080033c4 	.word	0x080033c4
 800180c:	20000008 	.word	0x20000008
 8001810:	2000000c 	.word	0x2000000c

08001814 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800182e:	4b1e      	ldr	r3, [pc, #120]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b04      	cmp	r3, #4
 800183c:	d002      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x30>
 800183e:	2b08      	cmp	r3, #8
 8001840:	d003      	beq.n	800184a <HAL_RCC_GetSysClockFreq+0x36>
 8001842:	e027      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001844:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001846:	613b      	str	r3, [r7, #16]
      break;
 8001848:	e027      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	0c9b      	lsrs	r3, r3, #18
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	4a17      	ldr	r2, [pc, #92]	@ (80018b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001854:	5cd3      	ldrb	r3, [r2, r3]
 8001856:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d010      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001862:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	0c5b      	lsrs	r3, r3, #17
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	4a11      	ldr	r2, [pc, #68]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800186e:	5cd3      	ldrb	r3, [r2, r3]
 8001870:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a0d      	ldr	r2, [pc, #52]	@ (80018ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001876:	fb03 f202 	mul.w	r2, r3, r2
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	e004      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a0c      	ldr	r2, [pc, #48]	@ (80018b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001888:	fb02 f303 	mul.w	r3, r2, r3
 800188c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	613b      	str	r3, [r7, #16]
      break;
 8001892:	e002      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001894:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001896:	613b      	str	r3, [r7, #16]
      break;
 8001898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800189a:	693b      	ldr	r3, [r7, #16]
}
 800189c:	4618      	mov	r0, r3
 800189e:	371c      	adds	r7, #28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	007a1200 	.word	0x007a1200
 80018b0:	080033dc 	.word	0x080033dc
 80018b4:	080033ec 	.word	0x080033ec
 80018b8:	003d0900 	.word	0x003d0900

080018bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018c0:	4b02      	ldr	r3, [pc, #8]	@ (80018cc <HAL_RCC_GetHCLKFreq+0x10>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	20000008 	.word	0x20000008

080018d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018d4:	f7ff fff2 	bl	80018bc <HAL_RCC_GetHCLKFreq>
 80018d8:	4602      	mov	r2, r0
 80018da:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	4903      	ldr	r1, [pc, #12]	@ (80018f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018e6:	5ccb      	ldrb	r3, [r1, r3]
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000
 80018f4:	080033d4 	.word	0x080033d4

080018f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018fc:	f7ff ffde 	bl	80018bc <HAL_RCC_GetHCLKFreq>
 8001900:	4602      	mov	r2, r0
 8001902:	4b05      	ldr	r3, [pc, #20]	@ (8001918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	0adb      	lsrs	r3, r3, #11
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	4903      	ldr	r1, [pc, #12]	@ (800191c <HAL_RCC_GetPCLK2Freq+0x24>)
 800190e:	5ccb      	ldrb	r3, [r1, r3]
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001914:	4618      	mov	r0, r3
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000
 800191c:	080033d4 	.word	0x080033d4

08001920 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001928:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <RCC_Delay+0x34>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <RCC_Delay+0x38>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	0a5b      	lsrs	r3, r3, #9
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	fb02 f303 	mul.w	r3, r2, r3
 800193a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800193c:	bf00      	nop
  }
  while (Delay --);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1e5a      	subs	r2, r3, #1
 8001942:	60fa      	str	r2, [r7, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f9      	bne.n	800193c <RCC_Delay+0x1c>
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	20000008 	.word	0x20000008
 8001958:	10624dd3 	.word	0x10624dd3

0800195c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b01      	cmp	r3, #1
 800196e:	d001      	beq.n	8001974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e03a      	b.n	80019ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2202      	movs	r2, #2
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a18      	ldr	r2, [pc, #96]	@ (80019f4 <HAL_TIM_Base_Start_IT+0x98>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00e      	beq.n	80019b4 <HAL_TIM_Base_Start_IT+0x58>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800199e:	d009      	beq.n	80019b4 <HAL_TIM_Base_Start_IT+0x58>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a14      	ldr	r2, [pc, #80]	@ (80019f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d004      	beq.n	80019b4 <HAL_TIM_Base_Start_IT+0x58>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a13      	ldr	r2, [pc, #76]	@ (80019fc <HAL_TIM_Base_Start_IT+0xa0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d111      	bne.n	80019d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d010      	beq.n	80019e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0201 	orr.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019d6:	e007      	b.n	80019e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0201 	orr.w	r2, r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	40012c00 	.word	0x40012c00
 80019f8:	40000400 	.word	0x40000400
 80019fc:	40000800 	.word	0x40000800

08001a00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e041      	b.n	8001a96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d106      	bne.n	8001a2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7fe feb2 	bl	8000790 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4610      	mov	r0, r2
 8001a40:	f000 fabe 	bl	8001fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d109      	bne.n	8001ac4 <HAL_TIM_PWM_Start+0x24>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	bf14      	ite	ne
 8001abc:	2301      	movne	r3, #1
 8001abe:	2300      	moveq	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	e022      	b.n	8001b0a <HAL_TIM_PWM_Start+0x6a>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d109      	bne.n	8001ade <HAL_TIM_PWM_Start+0x3e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	bf14      	ite	ne
 8001ad6:	2301      	movne	r3, #1
 8001ad8:	2300      	moveq	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	e015      	b.n	8001b0a <HAL_TIM_PWM_Start+0x6a>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d109      	bne.n	8001af8 <HAL_TIM_PWM_Start+0x58>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	bf14      	ite	ne
 8001af0:	2301      	movne	r3, #1
 8001af2:	2300      	moveq	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	e008      	b.n	8001b0a <HAL_TIM_PWM_Start+0x6a>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	bf14      	ite	ne
 8001b04:	2301      	movne	r3, #1
 8001b06:	2300      	moveq	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e05e      	b.n	8001bd0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d104      	bne.n	8001b22 <HAL_TIM_PWM_Start+0x82>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b20:	e013      	b.n	8001b4a <HAL_TIM_PWM_Start+0xaa>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d104      	bne.n	8001b32 <HAL_TIM_PWM_Start+0x92>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b30:	e00b      	b.n	8001b4a <HAL_TIM_PWM_Start+0xaa>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d104      	bne.n	8001b42 <HAL_TIM_PWM_Start+0xa2>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b40:	e003      	b.n	8001b4a <HAL_TIM_PWM_Start+0xaa>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2202      	movs	r2, #2
 8001b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	6839      	ldr	r1, [r7, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 fc1e 	bl	8002394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd8 <HAL_TIM_PWM_Start+0x138>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d107      	bne.n	8001b72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a18      	ldr	r2, [pc, #96]	@ (8001bd8 <HAL_TIM_PWM_Start+0x138>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d00e      	beq.n	8001b9a <HAL_TIM_PWM_Start+0xfa>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b84:	d009      	beq.n	8001b9a <HAL_TIM_PWM_Start+0xfa>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a14      	ldr	r2, [pc, #80]	@ (8001bdc <HAL_TIM_PWM_Start+0x13c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d004      	beq.n	8001b9a <HAL_TIM_PWM_Start+0xfa>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a12      	ldr	r2, [pc, #72]	@ (8001be0 <HAL_TIM_PWM_Start+0x140>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d111      	bne.n	8001bbe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2b06      	cmp	r3, #6
 8001baa:	d010      	beq.n	8001bce <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bbc:	e007      	b.n	8001bce <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0201 	orr.w	r2, r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40012c00 	.word	0x40012c00
 8001bdc:	40000400 	.word	0x40000400
 8001be0:	40000800 	.word	0x40000800

08001be4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d122      	bne.n	8001c40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d11b      	bne.n	8001c40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0202 	mvn.w	r2, #2
 8001c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f9af 	bl	8001f8a <HAL_TIM_IC_CaptureCallback>
 8001c2c:	e005      	b.n	8001c3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f9a2 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f9b1 	bl	8001f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d122      	bne.n	8001c94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d11b      	bne.n	8001c94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0204 	mvn.w	r2, #4
 8001c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2202      	movs	r2, #2
 8001c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f985 	bl	8001f8a <HAL_TIM_IC_CaptureCallback>
 8001c80:	e005      	b.n	8001c8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f978 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f987 	bl	8001f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d122      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d11b      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0208 	mvn.w	r2, #8
 8001cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f95b 	bl	8001f8a <HAL_TIM_IC_CaptureCallback>
 8001cd4:	e005      	b.n	8001ce2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f94e 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f95d 	bl	8001f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b10      	cmp	r3, #16
 8001cf4:	d122      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2b10      	cmp	r3, #16
 8001d02:	d11b      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0210 	mvn.w	r2, #16
 8001d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2208      	movs	r2, #8
 8001d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f931 	bl	8001f8a <HAL_TIM_IC_CaptureCallback>
 8001d28:	e005      	b.n	8001d36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f924 	bl	8001f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f933 	bl	8001f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d10e      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d107      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0201 	mvn.w	r2, #1
 8001d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7fe fa3c 	bl	80001e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d72:	2b80      	cmp	r3, #128	@ 0x80
 8001d74:	d10e      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d80:	2b80      	cmp	r3, #128	@ 0x80
 8001d82:	d107      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fc29 	bl	80025e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d9e:	2b40      	cmp	r3, #64	@ 0x40
 8001da0:	d10e      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dac:	2b40      	cmp	r3, #64	@ 0x40
 8001dae:	d107      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8f7 	bl	8001fae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d10e      	bne.n	8001dec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d107      	bne.n	8001dec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0220 	mvn.w	r2, #32
 8001de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fbf4 	bl	80025d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e0ae      	b.n	8001f70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b0c      	cmp	r3, #12
 8001e1e:	f200 809f 	bhi.w	8001f60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001e22:	a201      	add	r2, pc, #4	@ (adr r2, 8001e28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e28:	08001e5d 	.word	0x08001e5d
 8001e2c:	08001f61 	.word	0x08001f61
 8001e30:	08001f61 	.word	0x08001f61
 8001e34:	08001f61 	.word	0x08001f61
 8001e38:	08001e9d 	.word	0x08001e9d
 8001e3c:	08001f61 	.word	0x08001f61
 8001e40:	08001f61 	.word	0x08001f61
 8001e44:	08001f61 	.word	0x08001f61
 8001e48:	08001edf 	.word	0x08001edf
 8001e4c:	08001f61 	.word	0x08001f61
 8001e50:	08001f61 	.word	0x08001f61
 8001e54:	08001f61 	.word	0x08001f61
 8001e58:	08001f1f 	.word	0x08001f1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f90e 	bl	8002084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699a      	ldr	r2, [r3, #24]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0208 	orr.w	r2, r2, #8
 8001e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699a      	ldr	r2, [r3, #24]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0204 	bic.w	r2, r2, #4
 8001e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6999      	ldr	r1, [r3, #24]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	619a      	str	r2, [r3, #24]
      break;
 8001e9a:	e064      	b.n	8001f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 f954 	bl	8002150 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699a      	ldr	r2, [r3, #24]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699a      	ldr	r2, [r3, #24]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6999      	ldr	r1, [r3, #24]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	021a      	lsls	r2, r3, #8
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	619a      	str	r2, [r3, #24]
      break;
 8001edc:	e043      	b.n	8001f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68b9      	ldr	r1, [r7, #8]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 f99d 	bl	8002224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69da      	ldr	r2, [r3, #28]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0208 	orr.w	r2, r2, #8
 8001ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	69da      	ldr	r2, [r3, #28]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0204 	bic.w	r2, r2, #4
 8001f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	69d9      	ldr	r1, [r3, #28]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	61da      	str	r2, [r3, #28]
      break;
 8001f1c:	e023      	b.n	8001f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68b9      	ldr	r1, [r7, #8]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 f9e7 	bl	80022f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	69da      	ldr	r2, [r3, #28]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	69da      	ldr	r2, [r3, #28]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	69d9      	ldr	r1, [r3, #28]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	021a      	lsls	r2, r3, #8
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	61da      	str	r2, [r3, #28]
      break;
 8001f5e:	e002      	b.n	8001f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	75fb      	strb	r3, [r7, #23]
      break;
 8001f64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a29      	ldr	r2, [pc, #164]	@ (8002078 <TIM_Base_SetConfig+0xb8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00b      	beq.n	8001ff0 <TIM_Base_SetConfig+0x30>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fde:	d007      	beq.n	8001ff0 <TIM_Base_SetConfig+0x30>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a26      	ldr	r2, [pc, #152]	@ (800207c <TIM_Base_SetConfig+0xbc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d003      	beq.n	8001ff0 <TIM_Base_SetConfig+0x30>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a25      	ldr	r2, [pc, #148]	@ (8002080 <TIM_Base_SetConfig+0xc0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d108      	bne.n	8002002 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a1c      	ldr	r2, [pc, #112]	@ (8002078 <TIM_Base_SetConfig+0xb8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00b      	beq.n	8002022 <TIM_Base_SetConfig+0x62>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002010:	d007      	beq.n	8002022 <TIM_Base_SetConfig+0x62>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a19      	ldr	r2, [pc, #100]	@ (800207c <TIM_Base_SetConfig+0xbc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d003      	beq.n	8002022 <TIM_Base_SetConfig+0x62>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a18      	ldr	r2, [pc, #96]	@ (8002080 <TIM_Base_SetConfig+0xc0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d108      	bne.n	8002034 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	4313      	orrs	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a07      	ldr	r2, [pc, #28]	@ (8002078 <TIM_Base_SetConfig+0xb8>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d103      	bne.n	8002068 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	615a      	str	r2, [r3, #20]
}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	40012c00 	.word	0x40012c00
 800207c:	40000400 	.word	0x40000400
 8002080:	40000800 	.word	0x40000800

08002084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f023 0201 	bic.w	r2, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f023 0303 	bic.w	r3, r3, #3
 80020ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f023 0302 	bic.w	r3, r3, #2
 80020cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a1c      	ldr	r2, [pc, #112]	@ (800214c <TIM_OC1_SetConfig+0xc8>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d10c      	bne.n	80020fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f023 0308 	bic.w	r3, r3, #8
 80020e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a13      	ldr	r2, [pc, #76]	@ (800214c <TIM_OC1_SetConfig+0xc8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d111      	bne.n	8002126 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002108:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002110:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	621a      	str	r2, [r3, #32]
}
 8002140:	bf00      	nop
 8002142:	371c      	adds	r7, #28
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40012c00 	.word	0x40012c00

08002150 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f023 0210 	bic.w	r2, r3, #16
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800217e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4313      	orrs	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f023 0320 	bic.w	r3, r3, #32
 800219a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002220 <TIM_OC2_SetConfig+0xd0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d10d      	bne.n	80021cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a14      	ldr	r2, [pc, #80]	@ (8002220 <TIM_OC2_SetConfig+0xd0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d113      	bne.n	80021fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80021da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80021e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	621a      	str	r2, [r3, #32]
}
 8002216:	bf00      	nop
 8002218:	371c      	adds	r7, #28
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	40012c00 	.word	0x40012c00

08002224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 0303 	bic.w	r3, r3, #3
 800225a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800226c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	4313      	orrs	r3, r2
 8002278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a1d      	ldr	r2, [pc, #116]	@ (80022f4 <TIM_OC3_SetConfig+0xd0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10d      	bne.n	800229e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	4313      	orrs	r3, r2
 8002294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800229c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a14      	ldr	r2, [pc, #80]	@ (80022f4 <TIM_OC3_SetConfig+0xd0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d113      	bne.n	80022ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80022b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	621a      	str	r2, [r3, #32]
}
 80022e8:	bf00      	nop
 80022ea:	371c      	adds	r7, #28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40012c00 	.word	0x40012c00

080022f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800232e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	021b      	lsls	r3, r3, #8
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	031b      	lsls	r3, r3, #12
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a0f      	ldr	r2, [pc, #60]	@ (8002390 <TIM_OC4_SetConfig+0x98>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d109      	bne.n	800236c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800235e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	019b      	lsls	r3, r3, #6
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	621a      	str	r2, [r3, #32]
}
 8002386:	bf00      	nop
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	40012c00 	.word	0x40012c00

08002394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002394:	b480      	push	{r7}
 8002396:	b087      	sub	sp, #28
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	2201      	movs	r2, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a1a      	ldr	r2, [r3, #32]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	401a      	ands	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a1a      	ldr	r2, [r3, #32]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	431a      	orrs	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	621a      	str	r2, [r3, #32]
}
 80023d2:	bf00      	nop
 80023d4:	371c      	adds	r7, #28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <HAL_TIMEx_PWMN_Start+0x24>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	bf14      	ite	ne
 80023f8:	2301      	movne	r3, #1
 80023fa:	2300      	moveq	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e022      	b.n	8002446 <HAL_TIMEx_PWMN_Start+0x6a>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b04      	cmp	r3, #4
 8002404:	d109      	bne.n	800241a <HAL_TIMEx_PWMN_Start+0x3e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b01      	cmp	r3, #1
 8002410:	bf14      	ite	ne
 8002412:	2301      	movne	r3, #1
 8002414:	2300      	moveq	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	e015      	b.n	8002446 <HAL_TIMEx_PWMN_Start+0x6a>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b08      	cmp	r3, #8
 800241e:	d109      	bne.n	8002434 <HAL_TIMEx_PWMN_Start+0x58>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	bf14      	ite	ne
 800242c:	2301      	movne	r3, #1
 800242e:	2300      	moveq	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	e008      	b.n	8002446 <HAL_TIMEx_PWMN_Start+0x6a>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b01      	cmp	r3, #1
 800243e:	bf14      	ite	ne
 8002440:	2301      	movne	r3, #1
 8002442:	2300      	moveq	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e059      	b.n	8002502 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d104      	bne.n	800245e <HAL_TIMEx_PWMN_Start+0x82>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800245c:	e013      	b.n	8002486 <HAL_TIMEx_PWMN_Start+0xaa>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b04      	cmp	r3, #4
 8002462:	d104      	bne.n	800246e <HAL_TIMEx_PWMN_Start+0x92>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800246c:	e00b      	b.n	8002486 <HAL_TIMEx_PWMN_Start+0xaa>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b08      	cmp	r3, #8
 8002472:	d104      	bne.n	800247e <HAL_TIMEx_PWMN_Start+0xa2>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800247c:	e003      	b.n	8002486 <HAL_TIMEx_PWMN_Start+0xaa>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2202      	movs	r2, #2
 8002482:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2204      	movs	r2, #4
 800248c:	6839      	ldr	r1, [r7, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f8b2 	bl	80025f8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a18      	ldr	r2, [pc, #96]	@ (800250c <HAL_TIMEx_PWMN_Start+0x130>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00e      	beq.n	80024cc <HAL_TIMEx_PWMN_Start+0xf0>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b6:	d009      	beq.n	80024cc <HAL_TIMEx_PWMN_Start+0xf0>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a14      	ldr	r2, [pc, #80]	@ (8002510 <HAL_TIMEx_PWMN_Start+0x134>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d004      	beq.n	80024cc <HAL_TIMEx_PWMN_Start+0xf0>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a13      	ldr	r2, [pc, #76]	@ (8002514 <HAL_TIMEx_PWMN_Start+0x138>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d111      	bne.n	80024f0 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2b06      	cmp	r3, #6
 80024dc:	d010      	beq.n	8002500 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0201 	orr.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ee:	e007      	b.n	8002500 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40012c00 	.word	0x40012c00
 8002510:	40000400 	.word	0x40000400
 8002514:	40000800 	.word	0x40000800

08002518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800252c:	2302      	movs	r3, #2
 800252e:	e046      	b.n	80025be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a16      	ldr	r2, [pc, #88]	@ (80025c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d00e      	beq.n	8002592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800257c:	d009      	beq.n	8002592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a12      	ldr	r2, [pc, #72]	@ (80025cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d004      	beq.n	8002592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a10      	ldr	r2, [pc, #64]	@ (80025d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d10c      	bne.n	80025ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002598:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40012c00 	.word	0x40012c00
 80025cc:	40000400 	.word	0x40000400
 80025d0:	40000800 	.word	0x40000800

080025d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f003 031f 	and.w	r3, r3, #31
 800260a:	2204      	movs	r2, #4
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a1a      	ldr	r2, [r3, #32]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	43db      	mvns	r3, r3
 800261a:	401a      	ands	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6a1a      	ldr	r2, [r3, #32]
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	fa01 f303 	lsl.w	r3, r1, r3
 8002630:	431a      	orrs	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	621a      	str	r2, [r3, #32]
}
 8002636:	bf00      	nop
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e042      	b.n	80026d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe f950 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2224      	movs	r2, #36	@ 0x24
 8002670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f91d 	bl	80028c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	@ 0x28
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d16d      	bne.n	80027dc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <HAL_UART_Transmit+0x2c>
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e066      	b.n	80027de <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2221      	movs	r2, #33	@ 0x21
 800271a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800271e:	f7fe fa37 	bl	8000b90 <HAL_GetTick>
 8002722:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	88fa      	ldrh	r2, [r7, #6]
 8002728:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	88fa      	ldrh	r2, [r7, #6]
 800272e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002738:	d108      	bne.n	800274c <HAL_UART_Transmit+0x6c>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d104      	bne.n	800274c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	e003      	b.n	8002754 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002750:	2300      	movs	r3, #0
 8002752:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002754:	e02a      	b.n	80027ac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2200      	movs	r2, #0
 800275e:	2180      	movs	r1, #128	@ 0x80
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f840 	bl	80027e6 <UART_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e036      	b.n	80027de <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10b      	bne.n	800278e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002784:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	3302      	adds	r3, #2
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	e007      	b.n	800279e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	781a      	ldrb	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	3301      	adds	r3, #1
 800279c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1cf      	bne.n	8002756 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2200      	movs	r2, #0
 80027be:	2140      	movs	r1, #64	@ 0x40
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f810 	bl	80027e6 <UART_WaitOnFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e006      	b.n	80027de <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	e000      	b.n	80027de <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80027dc:	2302      	movs	r3, #2
  }
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3720      	adds	r7, #32
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b090      	sub	sp, #64	@ 0x40
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	603b      	str	r3, [r7, #0]
 80027f2:	4613      	mov	r3, r2
 80027f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027f6:	e050      	b.n	800289a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fe:	d04c      	beq.n	800289a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002800:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002802:	2b00      	cmp	r3, #0
 8002804:	d007      	beq.n	8002816 <UART_WaitOnFlagUntilTimeout+0x30>
 8002806:	f7fe f9c3 	bl	8000b90 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002812:	429a      	cmp	r2, r3
 8002814:	d241      	bcs.n	800289a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	330c      	adds	r3, #12
 800281c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002820:	e853 3f00 	ldrex	r3, [r3]
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800282c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	330c      	adds	r3, #12
 8002834:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002836:	637a      	str	r2, [r7, #52]	@ 0x34
 8002838:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800283c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800283e:	e841 2300 	strex	r3, r2, [r1]
 8002842:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1e5      	bne.n	8002816 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	3314      	adds	r3, #20
 8002850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	e853 3f00 	ldrex	r3, [r3]
 8002858:	613b      	str	r3, [r7, #16]
   return(result);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	3314      	adds	r3, #20
 8002868:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800286a:	623a      	str	r2, [r7, #32]
 800286c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286e:	69f9      	ldr	r1, [r7, #28]
 8002870:	6a3a      	ldr	r2, [r7, #32]
 8002872:	e841 2300 	strex	r3, r2, [r1]
 8002876:	61bb      	str	r3, [r7, #24]
   return(result);
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e5      	bne.n	800284a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e00f      	b.n	80028ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	4013      	ands	r3, r2
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	bf0c      	ite	eq
 80028aa:	2301      	moveq	r3, #1
 80028ac:	2300      	movne	r3, #0
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d09f      	beq.n	80027f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3740      	adds	r7, #64	@ 0x40
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80028fe:	f023 030c 	bic.w	r3, r3, #12
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	68b9      	ldr	r1, [r7, #8]
 8002908:	430b      	orrs	r3, r1
 800290a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a2c      	ldr	r2, [pc, #176]	@ (80029d8 <UART_SetConfig+0x114>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d103      	bne.n	8002934 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800292c:	f7fe ffe4 	bl	80018f8 <HAL_RCC_GetPCLK2Freq>
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	e002      	b.n	800293a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002934:	f7fe ffcc 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 8002938:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	009a      	lsls	r2, r3, #2
 8002944:	441a      	add	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002950:	4a22      	ldr	r2, [pc, #136]	@ (80029dc <UART_SetConfig+0x118>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	0119      	lsls	r1, r3, #4
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	009a      	lsls	r2, r3, #2
 8002964:	441a      	add	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002970:	4b1a      	ldr	r3, [pc, #104]	@ (80029dc <UART_SetConfig+0x118>)
 8002972:	fba3 0302 	umull	r0, r3, r3, r2
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	2064      	movs	r0, #100	@ 0x64
 800297a:	fb00 f303 	mul.w	r3, r0, r3
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	3332      	adds	r3, #50	@ 0x32
 8002984:	4a15      	ldr	r2, [pc, #84]	@ (80029dc <UART_SetConfig+0x118>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002990:	4419      	add	r1, r3
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	009a      	lsls	r2, r3, #2
 800299c:	441a      	add	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029a8:	4b0c      	ldr	r3, [pc, #48]	@ (80029dc <UART_SetConfig+0x118>)
 80029aa:	fba3 0302 	umull	r0, r3, r3, r2
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2064      	movs	r0, #100	@ 0x64
 80029b2:	fb00 f303 	mul.w	r3, r0, r3
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	3332      	adds	r3, #50	@ 0x32
 80029bc:	4a07      	ldr	r2, [pc, #28]	@ (80029dc <UART_SetConfig+0x118>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	f003 020f 	and.w	r2, r3, #15
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	440a      	add	r2, r1
 80029ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40013800 	.word	0x40013800
 80029dc:	51eb851f 	.word	0x51eb851f

080029e0 <siprintf>:
 80029e0:	b40e      	push	{r1, r2, r3}
 80029e2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80029e6:	b500      	push	{lr}
 80029e8:	b09c      	sub	sp, #112	@ 0x70
 80029ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80029ec:	9002      	str	r0, [sp, #8]
 80029ee:	9006      	str	r0, [sp, #24]
 80029f0:	9107      	str	r1, [sp, #28]
 80029f2:	9104      	str	r1, [sp, #16]
 80029f4:	4808      	ldr	r0, [pc, #32]	@ (8002a18 <siprintf+0x38>)
 80029f6:	4909      	ldr	r1, [pc, #36]	@ (8002a1c <siprintf+0x3c>)
 80029f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80029fc:	9105      	str	r1, [sp, #20]
 80029fe:	6800      	ldr	r0, [r0, #0]
 8002a00:	a902      	add	r1, sp, #8
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	f000 f99a 	bl	8002d3c <_svfiprintf_r>
 8002a08:	2200      	movs	r2, #0
 8002a0a:	9b02      	ldr	r3, [sp, #8]
 8002a0c:	701a      	strb	r2, [r3, #0]
 8002a0e:	b01c      	add	sp, #112	@ 0x70
 8002a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a14:	b003      	add	sp, #12
 8002a16:	4770      	bx	lr
 8002a18:	20000014 	.word	0x20000014
 8002a1c:	ffff0208 	.word	0xffff0208

08002a20 <memset>:
 8002a20:	4603      	mov	r3, r0
 8002a22:	4402      	add	r2, r0
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d100      	bne.n	8002a2a <memset+0xa>
 8002a28:	4770      	bx	lr
 8002a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a2e:	e7f9      	b.n	8002a24 <memset+0x4>

08002a30 <__errno>:
 8002a30:	4b01      	ldr	r3, [pc, #4]	@ (8002a38 <__errno+0x8>)
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	20000014 	.word	0x20000014

08002a3c <__libc_init_array>:
 8002a3c:	b570      	push	{r4, r5, r6, lr}
 8002a3e:	2600      	movs	r6, #0
 8002a40:	4d0c      	ldr	r5, [pc, #48]	@ (8002a74 <__libc_init_array+0x38>)
 8002a42:	4c0d      	ldr	r4, [pc, #52]	@ (8002a78 <__libc_init_array+0x3c>)
 8002a44:	1b64      	subs	r4, r4, r5
 8002a46:	10a4      	asrs	r4, r4, #2
 8002a48:	42a6      	cmp	r6, r4
 8002a4a:	d109      	bne.n	8002a60 <__libc_init_array+0x24>
 8002a4c:	f000 fc80 	bl	8003350 <_init>
 8002a50:	2600      	movs	r6, #0
 8002a52:	4d0a      	ldr	r5, [pc, #40]	@ (8002a7c <__libc_init_array+0x40>)
 8002a54:	4c0a      	ldr	r4, [pc, #40]	@ (8002a80 <__libc_init_array+0x44>)
 8002a56:	1b64      	subs	r4, r4, r5
 8002a58:	10a4      	asrs	r4, r4, #2
 8002a5a:	42a6      	cmp	r6, r4
 8002a5c:	d105      	bne.n	8002a6a <__libc_init_array+0x2e>
 8002a5e:	bd70      	pop	{r4, r5, r6, pc}
 8002a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a64:	4798      	blx	r3
 8002a66:	3601      	adds	r6, #1
 8002a68:	e7ee      	b.n	8002a48 <__libc_init_array+0xc>
 8002a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a6e:	4798      	blx	r3
 8002a70:	3601      	adds	r6, #1
 8002a72:	e7f2      	b.n	8002a5a <__libc_init_array+0x1e>
 8002a74:	08003424 	.word	0x08003424
 8002a78:	08003424 	.word	0x08003424
 8002a7c:	08003424 	.word	0x08003424
 8002a80:	08003428 	.word	0x08003428

08002a84 <__retarget_lock_acquire_recursive>:
 8002a84:	4770      	bx	lr

08002a86 <__retarget_lock_release_recursive>:
 8002a86:	4770      	bx	lr

08002a88 <strcpy>:
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a8e:	f803 2b01 	strb.w	r2, [r3], #1
 8002a92:	2a00      	cmp	r2, #0
 8002a94:	d1f9      	bne.n	8002a8a <strcpy+0x2>
 8002a96:	4770      	bx	lr

08002a98 <_free_r>:
 8002a98:	b538      	push	{r3, r4, r5, lr}
 8002a9a:	4605      	mov	r5, r0
 8002a9c:	2900      	cmp	r1, #0
 8002a9e:	d040      	beq.n	8002b22 <_free_r+0x8a>
 8002aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002aa4:	1f0c      	subs	r4, r1, #4
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bfb8      	it	lt
 8002aaa:	18e4      	addlt	r4, r4, r3
 8002aac:	f000 f8de 	bl	8002c6c <__malloc_lock>
 8002ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8002b24 <_free_r+0x8c>)
 8002ab2:	6813      	ldr	r3, [r2, #0]
 8002ab4:	b933      	cbnz	r3, 8002ac4 <_free_r+0x2c>
 8002ab6:	6063      	str	r3, [r4, #4]
 8002ab8:	6014      	str	r4, [r2, #0]
 8002aba:	4628      	mov	r0, r5
 8002abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ac0:	f000 b8da 	b.w	8002c78 <__malloc_unlock>
 8002ac4:	42a3      	cmp	r3, r4
 8002ac6:	d908      	bls.n	8002ada <_free_r+0x42>
 8002ac8:	6820      	ldr	r0, [r4, #0]
 8002aca:	1821      	adds	r1, r4, r0
 8002acc:	428b      	cmp	r3, r1
 8002ace:	bf01      	itttt	eq
 8002ad0:	6819      	ldreq	r1, [r3, #0]
 8002ad2:	685b      	ldreq	r3, [r3, #4]
 8002ad4:	1809      	addeq	r1, r1, r0
 8002ad6:	6021      	streq	r1, [r4, #0]
 8002ad8:	e7ed      	b.n	8002ab6 <_free_r+0x1e>
 8002ada:	461a      	mov	r2, r3
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	b10b      	cbz	r3, 8002ae4 <_free_r+0x4c>
 8002ae0:	42a3      	cmp	r3, r4
 8002ae2:	d9fa      	bls.n	8002ada <_free_r+0x42>
 8002ae4:	6811      	ldr	r1, [r2, #0]
 8002ae6:	1850      	adds	r0, r2, r1
 8002ae8:	42a0      	cmp	r0, r4
 8002aea:	d10b      	bne.n	8002b04 <_free_r+0x6c>
 8002aec:	6820      	ldr	r0, [r4, #0]
 8002aee:	4401      	add	r1, r0
 8002af0:	1850      	adds	r0, r2, r1
 8002af2:	4283      	cmp	r3, r0
 8002af4:	6011      	str	r1, [r2, #0]
 8002af6:	d1e0      	bne.n	8002aba <_free_r+0x22>
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4408      	add	r0, r1
 8002afe:	6010      	str	r0, [r2, #0]
 8002b00:	6053      	str	r3, [r2, #4]
 8002b02:	e7da      	b.n	8002aba <_free_r+0x22>
 8002b04:	d902      	bls.n	8002b0c <_free_r+0x74>
 8002b06:	230c      	movs	r3, #12
 8002b08:	602b      	str	r3, [r5, #0]
 8002b0a:	e7d6      	b.n	8002aba <_free_r+0x22>
 8002b0c:	6820      	ldr	r0, [r4, #0]
 8002b0e:	1821      	adds	r1, r4, r0
 8002b10:	428b      	cmp	r3, r1
 8002b12:	bf01      	itttt	eq
 8002b14:	6819      	ldreq	r1, [r3, #0]
 8002b16:	685b      	ldreq	r3, [r3, #4]
 8002b18:	1809      	addeq	r1, r1, r0
 8002b1a:	6021      	streq	r1, [r4, #0]
 8002b1c:	6063      	str	r3, [r4, #4]
 8002b1e:	6054      	str	r4, [r2, #4]
 8002b20:	e7cb      	b.n	8002aba <_free_r+0x22>
 8002b22:	bd38      	pop	{r3, r4, r5, pc}
 8002b24:	200003d0 	.word	0x200003d0

08002b28 <sbrk_aligned>:
 8002b28:	b570      	push	{r4, r5, r6, lr}
 8002b2a:	4e0f      	ldr	r6, [pc, #60]	@ (8002b68 <sbrk_aligned+0x40>)
 8002b2c:	460c      	mov	r4, r1
 8002b2e:	6831      	ldr	r1, [r6, #0]
 8002b30:	4605      	mov	r5, r0
 8002b32:	b911      	cbnz	r1, 8002b3a <sbrk_aligned+0x12>
 8002b34:	f000 fbaa 	bl	800328c <_sbrk_r>
 8002b38:	6030      	str	r0, [r6, #0]
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	f000 fba5 	bl	800328c <_sbrk_r>
 8002b42:	1c43      	adds	r3, r0, #1
 8002b44:	d103      	bne.n	8002b4e <sbrk_aligned+0x26>
 8002b46:	f04f 34ff 	mov.w	r4, #4294967295
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	bd70      	pop	{r4, r5, r6, pc}
 8002b4e:	1cc4      	adds	r4, r0, #3
 8002b50:	f024 0403 	bic.w	r4, r4, #3
 8002b54:	42a0      	cmp	r0, r4
 8002b56:	d0f8      	beq.n	8002b4a <sbrk_aligned+0x22>
 8002b58:	1a21      	subs	r1, r4, r0
 8002b5a:	4628      	mov	r0, r5
 8002b5c:	f000 fb96 	bl	800328c <_sbrk_r>
 8002b60:	3001      	adds	r0, #1
 8002b62:	d1f2      	bne.n	8002b4a <sbrk_aligned+0x22>
 8002b64:	e7ef      	b.n	8002b46 <sbrk_aligned+0x1e>
 8002b66:	bf00      	nop
 8002b68:	200003cc 	.word	0x200003cc

08002b6c <_malloc_r>:
 8002b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b70:	1ccd      	adds	r5, r1, #3
 8002b72:	f025 0503 	bic.w	r5, r5, #3
 8002b76:	3508      	adds	r5, #8
 8002b78:	2d0c      	cmp	r5, #12
 8002b7a:	bf38      	it	cc
 8002b7c:	250c      	movcc	r5, #12
 8002b7e:	2d00      	cmp	r5, #0
 8002b80:	4606      	mov	r6, r0
 8002b82:	db01      	blt.n	8002b88 <_malloc_r+0x1c>
 8002b84:	42a9      	cmp	r1, r5
 8002b86:	d904      	bls.n	8002b92 <_malloc_r+0x26>
 8002b88:	230c      	movs	r3, #12
 8002b8a:	6033      	str	r3, [r6, #0]
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002c68 <_malloc_r+0xfc>
 8002b96:	f000 f869 	bl	8002c6c <__malloc_lock>
 8002b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8002b9e:	461c      	mov	r4, r3
 8002ba0:	bb44      	cbnz	r4, 8002bf4 <_malloc_r+0x88>
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	4630      	mov	r0, r6
 8002ba6:	f7ff ffbf 	bl	8002b28 <sbrk_aligned>
 8002baa:	1c43      	adds	r3, r0, #1
 8002bac:	4604      	mov	r4, r0
 8002bae:	d158      	bne.n	8002c62 <_malloc_r+0xf6>
 8002bb0:	f8d8 4000 	ldr.w	r4, [r8]
 8002bb4:	4627      	mov	r7, r4
 8002bb6:	2f00      	cmp	r7, #0
 8002bb8:	d143      	bne.n	8002c42 <_malloc_r+0xd6>
 8002bba:	2c00      	cmp	r4, #0
 8002bbc:	d04b      	beq.n	8002c56 <_malloc_r+0xea>
 8002bbe:	6823      	ldr	r3, [r4, #0]
 8002bc0:	4639      	mov	r1, r7
 8002bc2:	4630      	mov	r0, r6
 8002bc4:	eb04 0903 	add.w	r9, r4, r3
 8002bc8:	f000 fb60 	bl	800328c <_sbrk_r>
 8002bcc:	4581      	cmp	r9, r0
 8002bce:	d142      	bne.n	8002c56 <_malloc_r+0xea>
 8002bd0:	6821      	ldr	r1, [r4, #0]
 8002bd2:	4630      	mov	r0, r6
 8002bd4:	1a6d      	subs	r5, r5, r1
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	f7ff ffa6 	bl	8002b28 <sbrk_aligned>
 8002bdc:	3001      	adds	r0, #1
 8002bde:	d03a      	beq.n	8002c56 <_malloc_r+0xea>
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	442b      	add	r3, r5
 8002be4:	6023      	str	r3, [r4, #0]
 8002be6:	f8d8 3000 	ldr.w	r3, [r8]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	bb62      	cbnz	r2, 8002c48 <_malloc_r+0xdc>
 8002bee:	f8c8 7000 	str.w	r7, [r8]
 8002bf2:	e00f      	b.n	8002c14 <_malloc_r+0xa8>
 8002bf4:	6822      	ldr	r2, [r4, #0]
 8002bf6:	1b52      	subs	r2, r2, r5
 8002bf8:	d420      	bmi.n	8002c3c <_malloc_r+0xd0>
 8002bfa:	2a0b      	cmp	r2, #11
 8002bfc:	d917      	bls.n	8002c2e <_malloc_r+0xc2>
 8002bfe:	1961      	adds	r1, r4, r5
 8002c00:	42a3      	cmp	r3, r4
 8002c02:	6025      	str	r5, [r4, #0]
 8002c04:	bf18      	it	ne
 8002c06:	6059      	strne	r1, [r3, #4]
 8002c08:	6863      	ldr	r3, [r4, #4]
 8002c0a:	bf08      	it	eq
 8002c0c:	f8c8 1000 	streq.w	r1, [r8]
 8002c10:	5162      	str	r2, [r4, r5]
 8002c12:	604b      	str	r3, [r1, #4]
 8002c14:	4630      	mov	r0, r6
 8002c16:	f000 f82f 	bl	8002c78 <__malloc_unlock>
 8002c1a:	f104 000b 	add.w	r0, r4, #11
 8002c1e:	1d23      	adds	r3, r4, #4
 8002c20:	f020 0007 	bic.w	r0, r0, #7
 8002c24:	1ac2      	subs	r2, r0, r3
 8002c26:	bf1c      	itt	ne
 8002c28:	1a1b      	subne	r3, r3, r0
 8002c2a:	50a3      	strne	r3, [r4, r2]
 8002c2c:	e7af      	b.n	8002b8e <_malloc_r+0x22>
 8002c2e:	6862      	ldr	r2, [r4, #4]
 8002c30:	42a3      	cmp	r3, r4
 8002c32:	bf0c      	ite	eq
 8002c34:	f8c8 2000 	streq.w	r2, [r8]
 8002c38:	605a      	strne	r2, [r3, #4]
 8002c3a:	e7eb      	b.n	8002c14 <_malloc_r+0xa8>
 8002c3c:	4623      	mov	r3, r4
 8002c3e:	6864      	ldr	r4, [r4, #4]
 8002c40:	e7ae      	b.n	8002ba0 <_malloc_r+0x34>
 8002c42:	463c      	mov	r4, r7
 8002c44:	687f      	ldr	r7, [r7, #4]
 8002c46:	e7b6      	b.n	8002bb6 <_malloc_r+0x4a>
 8002c48:	461a      	mov	r2, r3
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	42a3      	cmp	r3, r4
 8002c4e:	d1fb      	bne.n	8002c48 <_malloc_r+0xdc>
 8002c50:	2300      	movs	r3, #0
 8002c52:	6053      	str	r3, [r2, #4]
 8002c54:	e7de      	b.n	8002c14 <_malloc_r+0xa8>
 8002c56:	230c      	movs	r3, #12
 8002c58:	4630      	mov	r0, r6
 8002c5a:	6033      	str	r3, [r6, #0]
 8002c5c:	f000 f80c 	bl	8002c78 <__malloc_unlock>
 8002c60:	e794      	b.n	8002b8c <_malloc_r+0x20>
 8002c62:	6005      	str	r5, [r0, #0]
 8002c64:	e7d6      	b.n	8002c14 <_malloc_r+0xa8>
 8002c66:	bf00      	nop
 8002c68:	200003d0 	.word	0x200003d0

08002c6c <__malloc_lock>:
 8002c6c:	4801      	ldr	r0, [pc, #4]	@ (8002c74 <__malloc_lock+0x8>)
 8002c6e:	f7ff bf09 	b.w	8002a84 <__retarget_lock_acquire_recursive>
 8002c72:	bf00      	nop
 8002c74:	200003c8 	.word	0x200003c8

08002c78 <__malloc_unlock>:
 8002c78:	4801      	ldr	r0, [pc, #4]	@ (8002c80 <__malloc_unlock+0x8>)
 8002c7a:	f7ff bf04 	b.w	8002a86 <__retarget_lock_release_recursive>
 8002c7e:	bf00      	nop
 8002c80:	200003c8 	.word	0x200003c8

08002c84 <__ssputs_r>:
 8002c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c88:	461f      	mov	r7, r3
 8002c8a:	688e      	ldr	r6, [r1, #8]
 8002c8c:	4682      	mov	sl, r0
 8002c8e:	42be      	cmp	r6, r7
 8002c90:	460c      	mov	r4, r1
 8002c92:	4690      	mov	r8, r2
 8002c94:	680b      	ldr	r3, [r1, #0]
 8002c96:	d82d      	bhi.n	8002cf4 <__ssputs_r+0x70>
 8002c98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002c9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002ca0:	d026      	beq.n	8002cf0 <__ssputs_r+0x6c>
 8002ca2:	6965      	ldr	r5, [r4, #20]
 8002ca4:	6909      	ldr	r1, [r1, #16]
 8002ca6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002caa:	eba3 0901 	sub.w	r9, r3, r1
 8002cae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002cb2:	1c7b      	adds	r3, r7, #1
 8002cb4:	444b      	add	r3, r9
 8002cb6:	106d      	asrs	r5, r5, #1
 8002cb8:	429d      	cmp	r5, r3
 8002cba:	bf38      	it	cc
 8002cbc:	461d      	movcc	r5, r3
 8002cbe:	0553      	lsls	r3, r2, #21
 8002cc0:	d527      	bpl.n	8002d12 <__ssputs_r+0x8e>
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	f7ff ff52 	bl	8002b6c <_malloc_r>
 8002cc8:	4606      	mov	r6, r0
 8002cca:	b360      	cbz	r0, 8002d26 <__ssputs_r+0xa2>
 8002ccc:	464a      	mov	r2, r9
 8002cce:	6921      	ldr	r1, [r4, #16]
 8002cd0:	f000 fafa 	bl	80032c8 <memcpy>
 8002cd4:	89a3      	ldrh	r3, [r4, #12]
 8002cd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cde:	81a3      	strh	r3, [r4, #12]
 8002ce0:	6126      	str	r6, [r4, #16]
 8002ce2:	444e      	add	r6, r9
 8002ce4:	6026      	str	r6, [r4, #0]
 8002ce6:	463e      	mov	r6, r7
 8002ce8:	6165      	str	r5, [r4, #20]
 8002cea:	eba5 0509 	sub.w	r5, r5, r9
 8002cee:	60a5      	str	r5, [r4, #8]
 8002cf0:	42be      	cmp	r6, r7
 8002cf2:	d900      	bls.n	8002cf6 <__ssputs_r+0x72>
 8002cf4:	463e      	mov	r6, r7
 8002cf6:	4632      	mov	r2, r6
 8002cf8:	4641      	mov	r1, r8
 8002cfa:	6820      	ldr	r0, [r4, #0]
 8002cfc:	f000 faac 	bl	8003258 <memmove>
 8002d00:	2000      	movs	r0, #0
 8002d02:	68a3      	ldr	r3, [r4, #8]
 8002d04:	1b9b      	subs	r3, r3, r6
 8002d06:	60a3      	str	r3, [r4, #8]
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	4433      	add	r3, r6
 8002d0c:	6023      	str	r3, [r4, #0]
 8002d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d12:	462a      	mov	r2, r5
 8002d14:	f000 fae6 	bl	80032e4 <_realloc_r>
 8002d18:	4606      	mov	r6, r0
 8002d1a:	2800      	cmp	r0, #0
 8002d1c:	d1e0      	bne.n	8002ce0 <__ssputs_r+0x5c>
 8002d1e:	4650      	mov	r0, sl
 8002d20:	6921      	ldr	r1, [r4, #16]
 8002d22:	f7ff feb9 	bl	8002a98 <_free_r>
 8002d26:	230c      	movs	r3, #12
 8002d28:	f8ca 3000 	str.w	r3, [sl]
 8002d2c:	89a3      	ldrh	r3, [r4, #12]
 8002d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d36:	81a3      	strh	r3, [r4, #12]
 8002d38:	e7e9      	b.n	8002d0e <__ssputs_r+0x8a>
	...

08002d3c <_svfiprintf_r>:
 8002d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d40:	4698      	mov	r8, r3
 8002d42:	898b      	ldrh	r3, [r1, #12]
 8002d44:	4607      	mov	r7, r0
 8002d46:	061b      	lsls	r3, r3, #24
 8002d48:	460d      	mov	r5, r1
 8002d4a:	4614      	mov	r4, r2
 8002d4c:	b09d      	sub	sp, #116	@ 0x74
 8002d4e:	d510      	bpl.n	8002d72 <_svfiprintf_r+0x36>
 8002d50:	690b      	ldr	r3, [r1, #16]
 8002d52:	b973      	cbnz	r3, 8002d72 <_svfiprintf_r+0x36>
 8002d54:	2140      	movs	r1, #64	@ 0x40
 8002d56:	f7ff ff09 	bl	8002b6c <_malloc_r>
 8002d5a:	6028      	str	r0, [r5, #0]
 8002d5c:	6128      	str	r0, [r5, #16]
 8002d5e:	b930      	cbnz	r0, 8002d6e <_svfiprintf_r+0x32>
 8002d60:	230c      	movs	r3, #12
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295
 8002d68:	b01d      	add	sp, #116	@ 0x74
 8002d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d6e:	2340      	movs	r3, #64	@ 0x40
 8002d70:	616b      	str	r3, [r5, #20]
 8002d72:	2300      	movs	r3, #0
 8002d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d76:	2320      	movs	r3, #32
 8002d78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002d7c:	2330      	movs	r3, #48	@ 0x30
 8002d7e:	f04f 0901 	mov.w	r9, #1
 8002d82:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d86:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002f20 <_svfiprintf_r+0x1e4>
 8002d8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002d8e:	4623      	mov	r3, r4
 8002d90:	469a      	mov	sl, r3
 8002d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d96:	b10a      	cbz	r2, 8002d9c <_svfiprintf_r+0x60>
 8002d98:	2a25      	cmp	r2, #37	@ 0x25
 8002d9a:	d1f9      	bne.n	8002d90 <_svfiprintf_r+0x54>
 8002d9c:	ebba 0b04 	subs.w	fp, sl, r4
 8002da0:	d00b      	beq.n	8002dba <_svfiprintf_r+0x7e>
 8002da2:	465b      	mov	r3, fp
 8002da4:	4622      	mov	r2, r4
 8002da6:	4629      	mov	r1, r5
 8002da8:	4638      	mov	r0, r7
 8002daa:	f7ff ff6b 	bl	8002c84 <__ssputs_r>
 8002dae:	3001      	adds	r0, #1
 8002db0:	f000 80a7 	beq.w	8002f02 <_svfiprintf_r+0x1c6>
 8002db4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002db6:	445a      	add	r2, fp
 8002db8:	9209      	str	r2, [sp, #36]	@ 0x24
 8002dba:	f89a 3000 	ldrb.w	r3, [sl]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 809f 	beq.w	8002f02 <_svfiprintf_r+0x1c6>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002dce:	f10a 0a01 	add.w	sl, sl, #1
 8002dd2:	9304      	str	r3, [sp, #16]
 8002dd4:	9307      	str	r3, [sp, #28]
 8002dd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002dda:	931a      	str	r3, [sp, #104]	@ 0x68
 8002ddc:	4654      	mov	r4, sl
 8002dde:	2205      	movs	r2, #5
 8002de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002de4:	484e      	ldr	r0, [pc, #312]	@ (8002f20 <_svfiprintf_r+0x1e4>)
 8002de6:	f000 fa61 	bl	80032ac <memchr>
 8002dea:	9a04      	ldr	r2, [sp, #16]
 8002dec:	b9d8      	cbnz	r0, 8002e26 <_svfiprintf_r+0xea>
 8002dee:	06d0      	lsls	r0, r2, #27
 8002df0:	bf44      	itt	mi
 8002df2:	2320      	movmi	r3, #32
 8002df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002df8:	0711      	lsls	r1, r2, #28
 8002dfa:	bf44      	itt	mi
 8002dfc:	232b      	movmi	r3, #43	@ 0x2b
 8002dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e02:	f89a 3000 	ldrb.w	r3, [sl]
 8002e06:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e08:	d015      	beq.n	8002e36 <_svfiprintf_r+0xfa>
 8002e0a:	4654      	mov	r4, sl
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f04f 0c0a 	mov.w	ip, #10
 8002e12:	9a07      	ldr	r2, [sp, #28]
 8002e14:	4621      	mov	r1, r4
 8002e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e1a:	3b30      	subs	r3, #48	@ 0x30
 8002e1c:	2b09      	cmp	r3, #9
 8002e1e:	d94b      	bls.n	8002eb8 <_svfiprintf_r+0x17c>
 8002e20:	b1b0      	cbz	r0, 8002e50 <_svfiprintf_r+0x114>
 8002e22:	9207      	str	r2, [sp, #28]
 8002e24:	e014      	b.n	8002e50 <_svfiprintf_r+0x114>
 8002e26:	eba0 0308 	sub.w	r3, r0, r8
 8002e2a:	fa09 f303 	lsl.w	r3, r9, r3
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	46a2      	mov	sl, r4
 8002e32:	9304      	str	r3, [sp, #16]
 8002e34:	e7d2      	b.n	8002ddc <_svfiprintf_r+0xa0>
 8002e36:	9b03      	ldr	r3, [sp, #12]
 8002e38:	1d19      	adds	r1, r3, #4
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	9103      	str	r1, [sp, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	bfbb      	ittet	lt
 8002e42:	425b      	neglt	r3, r3
 8002e44:	f042 0202 	orrlt.w	r2, r2, #2
 8002e48:	9307      	strge	r3, [sp, #28]
 8002e4a:	9307      	strlt	r3, [sp, #28]
 8002e4c:	bfb8      	it	lt
 8002e4e:	9204      	strlt	r2, [sp, #16]
 8002e50:	7823      	ldrb	r3, [r4, #0]
 8002e52:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e54:	d10a      	bne.n	8002e6c <_svfiprintf_r+0x130>
 8002e56:	7863      	ldrb	r3, [r4, #1]
 8002e58:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e5a:	d132      	bne.n	8002ec2 <_svfiprintf_r+0x186>
 8002e5c:	9b03      	ldr	r3, [sp, #12]
 8002e5e:	3402      	adds	r4, #2
 8002e60:	1d1a      	adds	r2, r3, #4
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	9203      	str	r2, [sp, #12]
 8002e66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002e6a:	9305      	str	r3, [sp, #20]
 8002e6c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002f24 <_svfiprintf_r+0x1e8>
 8002e70:	2203      	movs	r2, #3
 8002e72:	4650      	mov	r0, sl
 8002e74:	7821      	ldrb	r1, [r4, #0]
 8002e76:	f000 fa19 	bl	80032ac <memchr>
 8002e7a:	b138      	cbz	r0, 8002e8c <_svfiprintf_r+0x150>
 8002e7c:	2240      	movs	r2, #64	@ 0x40
 8002e7e:	9b04      	ldr	r3, [sp, #16]
 8002e80:	eba0 000a 	sub.w	r0, r0, sl
 8002e84:	4082      	lsls	r2, r0
 8002e86:	4313      	orrs	r3, r2
 8002e88:	3401      	adds	r4, #1
 8002e8a:	9304      	str	r3, [sp, #16]
 8002e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e90:	2206      	movs	r2, #6
 8002e92:	4825      	ldr	r0, [pc, #148]	@ (8002f28 <_svfiprintf_r+0x1ec>)
 8002e94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002e98:	f000 fa08 	bl	80032ac <memchr>
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	d036      	beq.n	8002f0e <_svfiprintf_r+0x1d2>
 8002ea0:	4b22      	ldr	r3, [pc, #136]	@ (8002f2c <_svfiprintf_r+0x1f0>)
 8002ea2:	bb1b      	cbnz	r3, 8002eec <_svfiprintf_r+0x1b0>
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	3307      	adds	r3, #7
 8002ea8:	f023 0307 	bic.w	r3, r3, #7
 8002eac:	3308      	adds	r3, #8
 8002eae:	9303      	str	r3, [sp, #12]
 8002eb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002eb2:	4433      	add	r3, r6
 8002eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002eb6:	e76a      	b.n	8002d8e <_svfiprintf_r+0x52>
 8002eb8:	460c      	mov	r4, r1
 8002eba:	2001      	movs	r0, #1
 8002ebc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ec0:	e7a8      	b.n	8002e14 <_svfiprintf_r+0xd8>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f04f 0c0a 	mov.w	ip, #10
 8002ec8:	4619      	mov	r1, r3
 8002eca:	3401      	adds	r4, #1
 8002ecc:	9305      	str	r3, [sp, #20]
 8002ece:	4620      	mov	r0, r4
 8002ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ed4:	3a30      	subs	r2, #48	@ 0x30
 8002ed6:	2a09      	cmp	r2, #9
 8002ed8:	d903      	bls.n	8002ee2 <_svfiprintf_r+0x1a6>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0c6      	beq.n	8002e6c <_svfiprintf_r+0x130>
 8002ede:	9105      	str	r1, [sp, #20]
 8002ee0:	e7c4      	b.n	8002e6c <_svfiprintf_r+0x130>
 8002ee2:	4604      	mov	r4, r0
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	fb0c 2101 	mla	r1, ip, r1, r2
 8002eea:	e7f0      	b.n	8002ece <_svfiprintf_r+0x192>
 8002eec:	ab03      	add	r3, sp, #12
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	462a      	mov	r2, r5
 8002ef2:	4638      	mov	r0, r7
 8002ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f30 <_svfiprintf_r+0x1f4>)
 8002ef6:	a904      	add	r1, sp, #16
 8002ef8:	f3af 8000 	nop.w
 8002efc:	1c42      	adds	r2, r0, #1
 8002efe:	4606      	mov	r6, r0
 8002f00:	d1d6      	bne.n	8002eb0 <_svfiprintf_r+0x174>
 8002f02:	89ab      	ldrh	r3, [r5, #12]
 8002f04:	065b      	lsls	r3, r3, #25
 8002f06:	f53f af2d 	bmi.w	8002d64 <_svfiprintf_r+0x28>
 8002f0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002f0c:	e72c      	b.n	8002d68 <_svfiprintf_r+0x2c>
 8002f0e:	ab03      	add	r3, sp, #12
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	462a      	mov	r2, r5
 8002f14:	4638      	mov	r0, r7
 8002f16:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <_svfiprintf_r+0x1f4>)
 8002f18:	a904      	add	r1, sp, #16
 8002f1a:	f000 f87d 	bl	8003018 <_printf_i>
 8002f1e:	e7ed      	b.n	8002efc <_svfiprintf_r+0x1c0>
 8002f20:	080033ee 	.word	0x080033ee
 8002f24:	080033f4 	.word	0x080033f4
 8002f28:	080033f8 	.word	0x080033f8
 8002f2c:	00000000 	.word	0x00000000
 8002f30:	08002c85 	.word	0x08002c85

08002f34 <_printf_common>:
 8002f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f38:	4616      	mov	r6, r2
 8002f3a:	4698      	mov	r8, r3
 8002f3c:	688a      	ldr	r2, [r1, #8]
 8002f3e:	690b      	ldr	r3, [r1, #16]
 8002f40:	4607      	mov	r7, r0
 8002f42:	4293      	cmp	r3, r2
 8002f44:	bfb8      	it	lt
 8002f46:	4613      	movlt	r3, r2
 8002f48:	6033      	str	r3, [r6, #0]
 8002f4a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f4e:	460c      	mov	r4, r1
 8002f50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f54:	b10a      	cbz	r2, 8002f5a <_printf_common+0x26>
 8002f56:	3301      	adds	r3, #1
 8002f58:	6033      	str	r3, [r6, #0]
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	0699      	lsls	r1, r3, #26
 8002f5e:	bf42      	ittt	mi
 8002f60:	6833      	ldrmi	r3, [r6, #0]
 8002f62:	3302      	addmi	r3, #2
 8002f64:	6033      	strmi	r3, [r6, #0]
 8002f66:	6825      	ldr	r5, [r4, #0]
 8002f68:	f015 0506 	ands.w	r5, r5, #6
 8002f6c:	d106      	bne.n	8002f7c <_printf_common+0x48>
 8002f6e:	f104 0a19 	add.w	sl, r4, #25
 8002f72:	68e3      	ldr	r3, [r4, #12]
 8002f74:	6832      	ldr	r2, [r6, #0]
 8002f76:	1a9b      	subs	r3, r3, r2
 8002f78:	42ab      	cmp	r3, r5
 8002f7a:	dc2b      	bgt.n	8002fd4 <_printf_common+0xa0>
 8002f7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002f80:	6822      	ldr	r2, [r4, #0]
 8002f82:	3b00      	subs	r3, #0
 8002f84:	bf18      	it	ne
 8002f86:	2301      	movne	r3, #1
 8002f88:	0692      	lsls	r2, r2, #26
 8002f8a:	d430      	bmi.n	8002fee <_printf_common+0xba>
 8002f8c:	4641      	mov	r1, r8
 8002f8e:	4638      	mov	r0, r7
 8002f90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002f94:	47c8      	blx	r9
 8002f96:	3001      	adds	r0, #1
 8002f98:	d023      	beq.n	8002fe2 <_printf_common+0xae>
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	6922      	ldr	r2, [r4, #16]
 8002f9e:	f003 0306 	and.w	r3, r3, #6
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	bf14      	ite	ne
 8002fa6:	2500      	movne	r5, #0
 8002fa8:	6833      	ldreq	r3, [r6, #0]
 8002faa:	f04f 0600 	mov.w	r6, #0
 8002fae:	bf08      	it	eq
 8002fb0:	68e5      	ldreq	r5, [r4, #12]
 8002fb2:	f104 041a 	add.w	r4, r4, #26
 8002fb6:	bf08      	it	eq
 8002fb8:	1aed      	subeq	r5, r5, r3
 8002fba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002fbe:	bf08      	it	eq
 8002fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	bfc4      	itt	gt
 8002fc8:	1a9b      	subgt	r3, r3, r2
 8002fca:	18ed      	addgt	r5, r5, r3
 8002fcc:	42b5      	cmp	r5, r6
 8002fce:	d11a      	bne.n	8003006 <_printf_common+0xd2>
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	e008      	b.n	8002fe6 <_printf_common+0xb2>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	4652      	mov	r2, sl
 8002fd8:	4641      	mov	r1, r8
 8002fda:	4638      	mov	r0, r7
 8002fdc:	47c8      	blx	r9
 8002fde:	3001      	adds	r0, #1
 8002fe0:	d103      	bne.n	8002fea <_printf_common+0xb6>
 8002fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fea:	3501      	adds	r5, #1
 8002fec:	e7c1      	b.n	8002f72 <_printf_common+0x3e>
 8002fee:	2030      	movs	r0, #48	@ 0x30
 8002ff0:	18e1      	adds	r1, r4, r3
 8002ff2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002ffc:	4422      	add	r2, r4
 8002ffe:	3302      	adds	r3, #2
 8003000:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003004:	e7c2      	b.n	8002f8c <_printf_common+0x58>
 8003006:	2301      	movs	r3, #1
 8003008:	4622      	mov	r2, r4
 800300a:	4641      	mov	r1, r8
 800300c:	4638      	mov	r0, r7
 800300e:	47c8      	blx	r9
 8003010:	3001      	adds	r0, #1
 8003012:	d0e6      	beq.n	8002fe2 <_printf_common+0xae>
 8003014:	3601      	adds	r6, #1
 8003016:	e7d9      	b.n	8002fcc <_printf_common+0x98>

08003018 <_printf_i>:
 8003018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800301c:	7e0f      	ldrb	r7, [r1, #24]
 800301e:	4691      	mov	r9, r2
 8003020:	2f78      	cmp	r7, #120	@ 0x78
 8003022:	4680      	mov	r8, r0
 8003024:	460c      	mov	r4, r1
 8003026:	469a      	mov	sl, r3
 8003028:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800302a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800302e:	d807      	bhi.n	8003040 <_printf_i+0x28>
 8003030:	2f62      	cmp	r7, #98	@ 0x62
 8003032:	d80a      	bhi.n	800304a <_printf_i+0x32>
 8003034:	2f00      	cmp	r7, #0
 8003036:	f000 80d3 	beq.w	80031e0 <_printf_i+0x1c8>
 800303a:	2f58      	cmp	r7, #88	@ 0x58
 800303c:	f000 80ba 	beq.w	80031b4 <_printf_i+0x19c>
 8003040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003044:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003048:	e03a      	b.n	80030c0 <_printf_i+0xa8>
 800304a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800304e:	2b15      	cmp	r3, #21
 8003050:	d8f6      	bhi.n	8003040 <_printf_i+0x28>
 8003052:	a101      	add	r1, pc, #4	@ (adr r1, 8003058 <_printf_i+0x40>)
 8003054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003058:	080030b1 	.word	0x080030b1
 800305c:	080030c5 	.word	0x080030c5
 8003060:	08003041 	.word	0x08003041
 8003064:	08003041 	.word	0x08003041
 8003068:	08003041 	.word	0x08003041
 800306c:	08003041 	.word	0x08003041
 8003070:	080030c5 	.word	0x080030c5
 8003074:	08003041 	.word	0x08003041
 8003078:	08003041 	.word	0x08003041
 800307c:	08003041 	.word	0x08003041
 8003080:	08003041 	.word	0x08003041
 8003084:	080031c7 	.word	0x080031c7
 8003088:	080030ef 	.word	0x080030ef
 800308c:	08003181 	.word	0x08003181
 8003090:	08003041 	.word	0x08003041
 8003094:	08003041 	.word	0x08003041
 8003098:	080031e9 	.word	0x080031e9
 800309c:	08003041 	.word	0x08003041
 80030a0:	080030ef 	.word	0x080030ef
 80030a4:	08003041 	.word	0x08003041
 80030a8:	08003041 	.word	0x08003041
 80030ac:	08003189 	.word	0x08003189
 80030b0:	6833      	ldr	r3, [r6, #0]
 80030b2:	1d1a      	adds	r2, r3, #4
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6032      	str	r2, [r6, #0]
 80030b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80030c0:	2301      	movs	r3, #1
 80030c2:	e09e      	b.n	8003202 <_printf_i+0x1ea>
 80030c4:	6833      	ldr	r3, [r6, #0]
 80030c6:	6820      	ldr	r0, [r4, #0]
 80030c8:	1d19      	adds	r1, r3, #4
 80030ca:	6031      	str	r1, [r6, #0]
 80030cc:	0606      	lsls	r6, r0, #24
 80030ce:	d501      	bpl.n	80030d4 <_printf_i+0xbc>
 80030d0:	681d      	ldr	r5, [r3, #0]
 80030d2:	e003      	b.n	80030dc <_printf_i+0xc4>
 80030d4:	0645      	lsls	r5, r0, #25
 80030d6:	d5fb      	bpl.n	80030d0 <_printf_i+0xb8>
 80030d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80030dc:	2d00      	cmp	r5, #0
 80030de:	da03      	bge.n	80030e8 <_printf_i+0xd0>
 80030e0:	232d      	movs	r3, #45	@ 0x2d
 80030e2:	426d      	negs	r5, r5
 80030e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030e8:	230a      	movs	r3, #10
 80030ea:	4859      	ldr	r0, [pc, #356]	@ (8003250 <_printf_i+0x238>)
 80030ec:	e011      	b.n	8003112 <_printf_i+0xfa>
 80030ee:	6821      	ldr	r1, [r4, #0]
 80030f0:	6833      	ldr	r3, [r6, #0]
 80030f2:	0608      	lsls	r0, r1, #24
 80030f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80030f8:	d402      	bmi.n	8003100 <_printf_i+0xe8>
 80030fa:	0649      	lsls	r1, r1, #25
 80030fc:	bf48      	it	mi
 80030fe:	b2ad      	uxthmi	r5, r5
 8003100:	2f6f      	cmp	r7, #111	@ 0x6f
 8003102:	6033      	str	r3, [r6, #0]
 8003104:	bf14      	ite	ne
 8003106:	230a      	movne	r3, #10
 8003108:	2308      	moveq	r3, #8
 800310a:	4851      	ldr	r0, [pc, #324]	@ (8003250 <_printf_i+0x238>)
 800310c:	2100      	movs	r1, #0
 800310e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003112:	6866      	ldr	r6, [r4, #4]
 8003114:	2e00      	cmp	r6, #0
 8003116:	bfa8      	it	ge
 8003118:	6821      	ldrge	r1, [r4, #0]
 800311a:	60a6      	str	r6, [r4, #8]
 800311c:	bfa4      	itt	ge
 800311e:	f021 0104 	bicge.w	r1, r1, #4
 8003122:	6021      	strge	r1, [r4, #0]
 8003124:	b90d      	cbnz	r5, 800312a <_printf_i+0x112>
 8003126:	2e00      	cmp	r6, #0
 8003128:	d04b      	beq.n	80031c2 <_printf_i+0x1aa>
 800312a:	4616      	mov	r6, r2
 800312c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003130:	fb03 5711 	mls	r7, r3, r1, r5
 8003134:	5dc7      	ldrb	r7, [r0, r7]
 8003136:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800313a:	462f      	mov	r7, r5
 800313c:	42bb      	cmp	r3, r7
 800313e:	460d      	mov	r5, r1
 8003140:	d9f4      	bls.n	800312c <_printf_i+0x114>
 8003142:	2b08      	cmp	r3, #8
 8003144:	d10b      	bne.n	800315e <_printf_i+0x146>
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	07df      	lsls	r7, r3, #31
 800314a:	d508      	bpl.n	800315e <_printf_i+0x146>
 800314c:	6923      	ldr	r3, [r4, #16]
 800314e:	6861      	ldr	r1, [r4, #4]
 8003150:	4299      	cmp	r1, r3
 8003152:	bfde      	ittt	le
 8003154:	2330      	movle	r3, #48	@ 0x30
 8003156:	f806 3c01 	strble.w	r3, [r6, #-1]
 800315a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800315e:	1b92      	subs	r2, r2, r6
 8003160:	6122      	str	r2, [r4, #16]
 8003162:	464b      	mov	r3, r9
 8003164:	4621      	mov	r1, r4
 8003166:	4640      	mov	r0, r8
 8003168:	f8cd a000 	str.w	sl, [sp]
 800316c:	aa03      	add	r2, sp, #12
 800316e:	f7ff fee1 	bl	8002f34 <_printf_common>
 8003172:	3001      	adds	r0, #1
 8003174:	d14a      	bne.n	800320c <_printf_i+0x1f4>
 8003176:	f04f 30ff 	mov.w	r0, #4294967295
 800317a:	b004      	add	sp, #16
 800317c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	f043 0320 	orr.w	r3, r3, #32
 8003186:	6023      	str	r3, [r4, #0]
 8003188:	2778      	movs	r7, #120	@ 0x78
 800318a:	4832      	ldr	r0, [pc, #200]	@ (8003254 <_printf_i+0x23c>)
 800318c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	6831      	ldr	r1, [r6, #0]
 8003194:	061f      	lsls	r7, r3, #24
 8003196:	f851 5b04 	ldr.w	r5, [r1], #4
 800319a:	d402      	bmi.n	80031a2 <_printf_i+0x18a>
 800319c:	065f      	lsls	r7, r3, #25
 800319e:	bf48      	it	mi
 80031a0:	b2ad      	uxthmi	r5, r5
 80031a2:	6031      	str	r1, [r6, #0]
 80031a4:	07d9      	lsls	r1, r3, #31
 80031a6:	bf44      	itt	mi
 80031a8:	f043 0320 	orrmi.w	r3, r3, #32
 80031ac:	6023      	strmi	r3, [r4, #0]
 80031ae:	b11d      	cbz	r5, 80031b8 <_printf_i+0x1a0>
 80031b0:	2310      	movs	r3, #16
 80031b2:	e7ab      	b.n	800310c <_printf_i+0xf4>
 80031b4:	4826      	ldr	r0, [pc, #152]	@ (8003250 <_printf_i+0x238>)
 80031b6:	e7e9      	b.n	800318c <_printf_i+0x174>
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	f023 0320 	bic.w	r3, r3, #32
 80031be:	6023      	str	r3, [r4, #0]
 80031c0:	e7f6      	b.n	80031b0 <_printf_i+0x198>
 80031c2:	4616      	mov	r6, r2
 80031c4:	e7bd      	b.n	8003142 <_printf_i+0x12a>
 80031c6:	6833      	ldr	r3, [r6, #0]
 80031c8:	6825      	ldr	r5, [r4, #0]
 80031ca:	1d18      	adds	r0, r3, #4
 80031cc:	6961      	ldr	r1, [r4, #20]
 80031ce:	6030      	str	r0, [r6, #0]
 80031d0:	062e      	lsls	r6, r5, #24
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	d501      	bpl.n	80031da <_printf_i+0x1c2>
 80031d6:	6019      	str	r1, [r3, #0]
 80031d8:	e002      	b.n	80031e0 <_printf_i+0x1c8>
 80031da:	0668      	lsls	r0, r5, #25
 80031dc:	d5fb      	bpl.n	80031d6 <_printf_i+0x1be>
 80031de:	8019      	strh	r1, [r3, #0]
 80031e0:	2300      	movs	r3, #0
 80031e2:	4616      	mov	r6, r2
 80031e4:	6123      	str	r3, [r4, #16]
 80031e6:	e7bc      	b.n	8003162 <_printf_i+0x14a>
 80031e8:	6833      	ldr	r3, [r6, #0]
 80031ea:	2100      	movs	r1, #0
 80031ec:	1d1a      	adds	r2, r3, #4
 80031ee:	6032      	str	r2, [r6, #0]
 80031f0:	681e      	ldr	r6, [r3, #0]
 80031f2:	6862      	ldr	r2, [r4, #4]
 80031f4:	4630      	mov	r0, r6
 80031f6:	f000 f859 	bl	80032ac <memchr>
 80031fa:	b108      	cbz	r0, 8003200 <_printf_i+0x1e8>
 80031fc:	1b80      	subs	r0, r0, r6
 80031fe:	6060      	str	r0, [r4, #4]
 8003200:	6863      	ldr	r3, [r4, #4]
 8003202:	6123      	str	r3, [r4, #16]
 8003204:	2300      	movs	r3, #0
 8003206:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800320a:	e7aa      	b.n	8003162 <_printf_i+0x14a>
 800320c:	4632      	mov	r2, r6
 800320e:	4649      	mov	r1, r9
 8003210:	4640      	mov	r0, r8
 8003212:	6923      	ldr	r3, [r4, #16]
 8003214:	47d0      	blx	sl
 8003216:	3001      	adds	r0, #1
 8003218:	d0ad      	beq.n	8003176 <_printf_i+0x15e>
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	079b      	lsls	r3, r3, #30
 800321e:	d413      	bmi.n	8003248 <_printf_i+0x230>
 8003220:	68e0      	ldr	r0, [r4, #12]
 8003222:	9b03      	ldr	r3, [sp, #12]
 8003224:	4298      	cmp	r0, r3
 8003226:	bfb8      	it	lt
 8003228:	4618      	movlt	r0, r3
 800322a:	e7a6      	b.n	800317a <_printf_i+0x162>
 800322c:	2301      	movs	r3, #1
 800322e:	4632      	mov	r2, r6
 8003230:	4649      	mov	r1, r9
 8003232:	4640      	mov	r0, r8
 8003234:	47d0      	blx	sl
 8003236:	3001      	adds	r0, #1
 8003238:	d09d      	beq.n	8003176 <_printf_i+0x15e>
 800323a:	3501      	adds	r5, #1
 800323c:	68e3      	ldr	r3, [r4, #12]
 800323e:	9903      	ldr	r1, [sp, #12]
 8003240:	1a5b      	subs	r3, r3, r1
 8003242:	42ab      	cmp	r3, r5
 8003244:	dcf2      	bgt.n	800322c <_printf_i+0x214>
 8003246:	e7eb      	b.n	8003220 <_printf_i+0x208>
 8003248:	2500      	movs	r5, #0
 800324a:	f104 0619 	add.w	r6, r4, #25
 800324e:	e7f5      	b.n	800323c <_printf_i+0x224>
 8003250:	080033ff 	.word	0x080033ff
 8003254:	08003410 	.word	0x08003410

08003258 <memmove>:
 8003258:	4288      	cmp	r0, r1
 800325a:	b510      	push	{r4, lr}
 800325c:	eb01 0402 	add.w	r4, r1, r2
 8003260:	d902      	bls.n	8003268 <memmove+0x10>
 8003262:	4284      	cmp	r4, r0
 8003264:	4623      	mov	r3, r4
 8003266:	d807      	bhi.n	8003278 <memmove+0x20>
 8003268:	1e43      	subs	r3, r0, #1
 800326a:	42a1      	cmp	r1, r4
 800326c:	d008      	beq.n	8003280 <memmove+0x28>
 800326e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003272:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003276:	e7f8      	b.n	800326a <memmove+0x12>
 8003278:	4601      	mov	r1, r0
 800327a:	4402      	add	r2, r0
 800327c:	428a      	cmp	r2, r1
 800327e:	d100      	bne.n	8003282 <memmove+0x2a>
 8003280:	bd10      	pop	{r4, pc}
 8003282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800328a:	e7f7      	b.n	800327c <memmove+0x24>

0800328c <_sbrk_r>:
 800328c:	b538      	push	{r3, r4, r5, lr}
 800328e:	2300      	movs	r3, #0
 8003290:	4d05      	ldr	r5, [pc, #20]	@ (80032a8 <_sbrk_r+0x1c>)
 8003292:	4604      	mov	r4, r0
 8003294:	4608      	mov	r0, r1
 8003296:	602b      	str	r3, [r5, #0]
 8003298:	f7fd fbc0 	bl	8000a1c <_sbrk>
 800329c:	1c43      	adds	r3, r0, #1
 800329e:	d102      	bne.n	80032a6 <_sbrk_r+0x1a>
 80032a0:	682b      	ldr	r3, [r5, #0]
 80032a2:	b103      	cbz	r3, 80032a6 <_sbrk_r+0x1a>
 80032a4:	6023      	str	r3, [r4, #0]
 80032a6:	bd38      	pop	{r3, r4, r5, pc}
 80032a8:	200003c4 	.word	0x200003c4

080032ac <memchr>:
 80032ac:	4603      	mov	r3, r0
 80032ae:	b510      	push	{r4, lr}
 80032b0:	b2c9      	uxtb	r1, r1
 80032b2:	4402      	add	r2, r0
 80032b4:	4293      	cmp	r3, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	d101      	bne.n	80032be <memchr+0x12>
 80032ba:	2000      	movs	r0, #0
 80032bc:	e003      	b.n	80032c6 <memchr+0x1a>
 80032be:	7804      	ldrb	r4, [r0, #0]
 80032c0:	3301      	adds	r3, #1
 80032c2:	428c      	cmp	r4, r1
 80032c4:	d1f6      	bne.n	80032b4 <memchr+0x8>
 80032c6:	bd10      	pop	{r4, pc}

080032c8 <memcpy>:
 80032c8:	440a      	add	r2, r1
 80032ca:	4291      	cmp	r1, r2
 80032cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80032d0:	d100      	bne.n	80032d4 <memcpy+0xc>
 80032d2:	4770      	bx	lr
 80032d4:	b510      	push	{r4, lr}
 80032d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032da:	4291      	cmp	r1, r2
 80032dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032e0:	d1f9      	bne.n	80032d6 <memcpy+0xe>
 80032e2:	bd10      	pop	{r4, pc}

080032e4 <_realloc_r>:
 80032e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e8:	4680      	mov	r8, r0
 80032ea:	4615      	mov	r5, r2
 80032ec:	460c      	mov	r4, r1
 80032ee:	b921      	cbnz	r1, 80032fa <_realloc_r+0x16>
 80032f0:	4611      	mov	r1, r2
 80032f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032f6:	f7ff bc39 	b.w	8002b6c <_malloc_r>
 80032fa:	b92a      	cbnz	r2, 8003308 <_realloc_r+0x24>
 80032fc:	f7ff fbcc 	bl	8002a98 <_free_r>
 8003300:	2400      	movs	r4, #0
 8003302:	4620      	mov	r0, r4
 8003304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003308:	f000 f81a 	bl	8003340 <_malloc_usable_size_r>
 800330c:	4285      	cmp	r5, r0
 800330e:	4606      	mov	r6, r0
 8003310:	d802      	bhi.n	8003318 <_realloc_r+0x34>
 8003312:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003316:	d8f4      	bhi.n	8003302 <_realloc_r+0x1e>
 8003318:	4629      	mov	r1, r5
 800331a:	4640      	mov	r0, r8
 800331c:	f7ff fc26 	bl	8002b6c <_malloc_r>
 8003320:	4607      	mov	r7, r0
 8003322:	2800      	cmp	r0, #0
 8003324:	d0ec      	beq.n	8003300 <_realloc_r+0x1c>
 8003326:	42b5      	cmp	r5, r6
 8003328:	462a      	mov	r2, r5
 800332a:	4621      	mov	r1, r4
 800332c:	bf28      	it	cs
 800332e:	4632      	movcs	r2, r6
 8003330:	f7ff ffca 	bl	80032c8 <memcpy>
 8003334:	4621      	mov	r1, r4
 8003336:	4640      	mov	r0, r8
 8003338:	f7ff fbae 	bl	8002a98 <_free_r>
 800333c:	463c      	mov	r4, r7
 800333e:	e7e0      	b.n	8003302 <_realloc_r+0x1e>

08003340 <_malloc_usable_size_r>:
 8003340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003344:	1f18      	subs	r0, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	bfbc      	itt	lt
 800334a:	580b      	ldrlt	r3, [r1, r0]
 800334c:	18c0      	addlt	r0, r0, r3
 800334e:	4770      	bx	lr

08003350 <_init>:
 8003350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003352:	bf00      	nop
 8003354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003356:	bc08      	pop	{r3}
 8003358:	469e      	mov	lr, r3
 800335a:	4770      	bx	lr

0800335c <_fini>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	bf00      	nop
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr
